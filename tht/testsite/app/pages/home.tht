
function main() {
    $test = Test.new();
    run($test);

    Response.sendHtml(html($test.resultsHtml()));
}

F isPerfMode {
    return Input.get('perf', 'b');
}

T html($results) {

    <!-- this is a comment -->
    <html>
        <head>
          <title>> THT Unit Tests
          {{ Css.plugin('base') }}
        </>
        <body>
            <main>
                <h1>> THT Unit Tests

                <a href="#test-results" style="font-weight: bold">> Skip to Results

                <p style="font-size: 100%; margin-top: 3rem">
                    <b>Perf:</>&nbsp;
                    When measuring raw execution speed of this page, set <code>_coreDevMode: false</> in <code>app.jcon</>, and reload with <a href="/home?perf=1">perf=1</a>.
                </>

                {{ $results }}

            </>
        </>
    </>
}

F run($t:o) {

    testMathAndLogic($t);
    testStrings($t);
    testTypeStrings($t);
    testUrlTagStrings($t);
    testBitwise($t);
    testControlFlow($t);
    testLists($t);
    testMaps($t);
    testFunctions($t);
    testTypeDeclarations($t);
    testTypes($t);
    testMisc($t);
    testTemplates($t);
    testOop($t);

    libFile($t);
    libDate($t);
    libJconTest($t);
    libJs($t);
    libJson($t);
    libLitemark($t);
    libMath($t);
    libMeta($t);
    libRequest($t);
   // libPerf($t);
    libPhp($t);
    libWeb($t);
    libInput($t);
    libGlobal($t);
    libSettings($t);
   // libMapDb($t);
    libSession($t);
    libSystem($t);


    // Not including these in perf measurement due to artificially long delays
    // or not representative of user code.
    if (!isPerfMode()) {

        libTest($t);
        libDb($t);
        libCache($t);
      //  libNet($t);
        runtimeErrors($t);
        compileErrors($t);
    }

}

F runtimeErrors($t) {

    $t.section('Runtime Errors');

    $t.dies(F { 'abc'.sdf(); }, 'non-existent method');

    $t.dies(F { 'abc {1}'.fill(['foo']); }, 'bad fill value');

    $t.dies(F { { a: 1 }.sdfsdf(); }, 'invalid method');

    $t.dies(F { $a = 'sdf'.reverse; }, 'missing parens in method call');

    $funFor = F { foreach 2 as $foo { } };

    $t.dies($funFor, 'Invalid argument');

    $t.dies(F {  return 'abc'.length; }, 'length()');

  //  $t.dies(F { $aa }, '');

}

F compileErrors($t) {

    Perf.start('test.compileErrors');

    $t.section('Parser');

    $code = '''

        // test comments

        /*
            this is a block comment
        */

        $commented = 2; // line-end comment

    ''';
    $t.parserOk($code, 'comments');
    $longComment = '// ' ~ String.repeat('a', 102) ~ '\n';
    $t.parserOk($longComment, 'line comment over 100 chars');
    $longBlockComment = '/*\n' ~ String.repeat('a', 102) ~ '\n*/';
    $t.parserOk($longBlockComment, 'block comment over 100 chars');


    $t.section('Parser Errors - Names');

    $t.parserError('$FOO = 3;',        'camelCase');
    $t.parserError('$fOO = 3;',        'camelCase');
    $t.parserError('$XMLreader = {};', 'camelCase');
    $t.parserError('$a_b = 3;',        'camelCase');
    $t.parserError('$$a = 1;',         'only one `$`');
    $t.parserError('$a$b = 1;',        'only one `$`');
    $t.parserError('$ = 1;',           'missing a name');
    $t.parserError('function fo$o() {}', '$');
    $t.parserError('function FOO() {}',   'camelCase');
    $t.parserError('function a () {}',    'longer than 1');

    $longName = String.repeat('a', 41);
    $t.parserError('$' ~ $longName ~ ' = 1;', '40 characters or less');
    $t.parserError('function ' ~ $longName ~ ' () {}', '40 characters or less');

    $t.section('Parser Errors - Aliases');

    $t.parserError('global $a = 3;', 'try: \`Globals');
    $t.parserError('for ($ary as $a) { }', 'try: \`foreach');
    $t.parserError('$ary = [];\nforeach ($a in $ary) { }', 'expected `as`');
    $t.parserError('$a = 1 ^ 2',  '+^');
    $t.parserError('$a = 1 & 2',  '+&');
    $t.parserError('$a = 1 | 2',  '+|');
    $t.parserError('$a = 1 >> 2',  '+>');
    $t.parserError('$a = 1 << 2',  '+<');
    $t.parserError('$a = 1++;',  '+= 1');
    $t.parserError('if (true) { } elif (false) {}',  'else if');
    $t.parserError('if (true) { } elsif (false) {}',  'else if');
    $t.parserError('if (true) { } elseif (false) {}',  'else if');
    $t.parserError('switch() {}',  'try: `match');
    $t.parserError('require();',  'try: `import`');
    $t.parserError('while () {}',  'try: `loop { ... }`');



    $t.parserError('$a = 1 ?: 0',  '||:');
    $t.parserError('$a = 1 ?? 0',  '||:');


    $t.section('Parser Errors - Misc');

    $t.parserError('$a;', 'standalone value');
    $t.parserError('true', 'standalone value');
    $t.parserError('{}', 'standalone expression');
    $t.parserError('$a || 123;', 'standalone expression');
    $t.parserError('$a == 123;', '`=` (assignment)');
    $t.parserError('if (a = 3) { }', 'assignment', 'if, missing paren');
    $t.parserError('break;', 'outside of a loop');
    $t.parserError('return;', 'outside of a function');
    $t.parserOk('if (true) { $a = 1; }', 'newline not needed for one-line if');
    $t.parserOk('function foo() { return 1; }', 'newline not needed for one-line fun');
    $t.parserError('$a = `hello', 'unexpected newline');
    $t.parserError('foreach ($a) {}', 'expected `as`');
    $t.parserError('for ($i = 0; i < 10; i += 1) {}', 'Try: \`foreach');
    $t.parserError('1 ? 2 ? 3 : 4 : 5', 'nested ternary');
    $t.parserError('$a = e`foo`;', 'string modifier');
    $t.parserError('if 2 => 1 { }', '>=');
    $t.parserError('if (1 =< 2) { }', '<=');
    $t.parserError('$a = 1 <> 2;', '!=');
    $t.parserError('function foo();', 'Unexpected semicolon');
    $t.parserError('if ($a == 3) x', 'Expected `{`');
    $t.parserError('$a = { FOO: `bar` };', 'camelCase');
    $t.parserError('$a = { foo: `bar`, foo: 1 };', 'duplicate key');
    $t.parserError('if (true) return;',   'Expected `{`');
    $t.parserError('print(`a`), print(`b`);', 'Missing semicolon');
    $t.parserError('$a = 1, b = 2;', 'Missing semicolon', '');
    $t.parserError('F foo { return 3 } ', 'Missing semicolon `;` after `return`');
    $t.parserError('$a = (1 + );', 'incomplete');
    $t.parserError('$a = 2 + (1 * ) + 1;', 'incomplete');
    $t.parserError('<?', 'Unknown token: `<?`');
    $t.parserError('?>', 'Unknown token: `?>`');
    $t.parserError('<?=', 'Unknown token: `<?=`');
    $t.parserError('`hello`[] = `a`;', 'Assignment can not');
    $t.parserError('function test($tma1,\n$tma2) {\n}', 'Newline');
    $t.parserError('function test($tma1, \n$tma2) {\n}', 'Newline');
    $t.parserError('$a = 1;;', 'Unexpected semicolon');
    $t.parserError('$a = [1,, ];', 'Unexpected comma');
    $t.parserError('$a = [,, 1];', 'Unexpected comma');
    $crlf =  String.charFromCode(13) ~ String.charFromCode(10);
    $t.parserOk('$a = 1;' ~ $crlf ~ '$b = 2;', 'Ignore Creturn (Windows line break)');


    $t.section('Parser Errors - Adjacent Tokens');

    $t.parserError('$a = $foo $foo;',   'unexpected variable');
    $t.parserError('$a = `foo` $foo;', 'unexpected variable');
    $t.parserError('$a = 123 $foo;',   'unexpected variable');
    $t.parserError('$a = $foo foo;',   'unexpected word');
    $t.parserError('$a = foo `foo`;', 'unexpected string');
    $t.parserError('$a = 123 `foo`;', 'unexpected string');
    $t.parserError('$a = foo 123;',   'unexpected number');
    $t.parserError('$a = `foo` 123;', 'unexpected number');
    $t.parserError('$a = [1, 2 3]',   'unexpected number');
    $t.parserError('$a = { k: a, b c }', 'unexpected word');


    $t.section('Parser Errors - Newlines');

    $t.parserError('$a = 1; /*\n', 'separate line');
    $t.parserError('/*\nsdf\n*/ d', 'missing newline');
    $t.parserError('/*\nsdf', 'unclosed comment');
    $t.parserError('template fooText() {\n};', 'missing newline'); // after }
    $t.parserOk('if (true)\n{ }',            'newline after `)`');
    $t.parserError('if\n(true)\n{ } ',       'newline after `if`');
    $t.parserError('foreach\n(el in list)',      'newline after `foreach`');
    $t.parserError('function\nfoo()',        'newline after `function`');

    $t.parserError('class\nFoo {}',          'newline after `class`');
    $t.parserError('$a = new\nFoo()',     'newline after `new`');
    $t.parserOk('if (true) {\n}\nelse\n{ }', 'newline after `else`');
    $t.parserOk('foreach ([`a`] as $a)\n{ }',     'newline after `)`');
    $t.parserOk('function fn()\n{ }',        'newline after `)`');

    $t.parserError('$a = 1;  $b = 2;',  'Only one semicolon statement');
    $t.parserError('$a = 1; a = 2;',  'Only one semicolon statement');
    $t.parserOk('$a = F { $c = 1; };',  'Statement in anon function');
    $t.parserError('$a = b(F { c(); d(); });',  'Only one semicolon statement');
    $t.parserOk('if (true) { $a = 1; }',  'Statement in conditional block');
    $t.parserError('if (true) { b(); c(); }',  'Only one semicolon statement');


    $t.section('Parser Errors - Spaces');

    $t.parserError('function(){}',         'space after `function`');
    $t.parserError('function foo () {}',   'space before `(`');
    $t.parserError('function foo(){}',     'space after `)`');
    $t.parserError('function foo{}',       'space before `{`');
    $t.parserError('function foo(){}',        'space after `)`');
    $t.parserError('$a = function() {};',   'space after `function`');
    $t.parserError('F foo() {a = 1 }',     'space after `{`');

    $t.parserError('$z = x{$a > 1 }', 'space after `{`');
    $t.parserError('$z = x{ $a > 1}', 'space before `}`');
    $t.parserError('$z = x{\n$a > 1}', 'newline after `{`');


    $t.parserError('( a + 1)',             'space after `(`');
    $t.parserError('$a = (\n1 +\n2\n);',    'space after `(`');
    $t.parserError('foo( );',              'space after `(`');
   // $t.parserError('$a = [ ]',          'space after `[`');
    $t.parserError('$a = { }',          'space after `{`');
    $t.parserOk('$a = [\n];',            'space after `[`');
    $t.parserOk('$a = {\n};',            'space after `{`');
    $t.parserError('$a = b[ 0]',        'space after `[`');
    $t.parserError('$a = b[0 ]',        'space before `]`');
    $t.parserError('$a= 1+2;',          'space before `=`');
    $t.parserError('$a =1+2;',          'space after `=`');
    $t.parserError('$a = 1+ 2;',        'space before `+`');
    $t.parserError('$a = 1 +2;',        'space after `+`');
    $t.parserError('$a = 1 + - 2',      'space after `-`');
    $t.parserError('$a = {a:`b`}',      'space after `{`');
    $t.parserError('$a = { a:`b`}',     'space after `:`');
    $t.parserError('$a = { a : `b`}',   'space before `:`');
    $t.parserError('$a = [a,b,c]',      'space after `,`');
    $t.parserError('if(true) {}',          'space after `if`');
    $t.parserError('if ( true) {}',        'space after `(`');
    $t.parserError('if (true){}',          'space before `{`');
    $t.parserError('F foo { return(a); }',           'space after `return`');
    $t.parserError('$a,$b,$c',                'space after `,`');
    $t.parserError('$a = 1 ;',           'space before `;`');
    $t.parserError('$a? 1 : 2;',            'space before `?`');
    $t.parserError('$a ?1 : 2;',            'space after `?`');
    $t.parserError('$a ? 1: 2;',            'space before `:`');
    $t.parserError('$a ? 1 :2;',            'space after `:`');
    $t.parserError('if true :$a = 1;',   'space before `:`');
    $t.parserError('if true:\n$a = 1;',   'newline after `:`');
    $t.parserOk('$a = [1, 2, 3];', 'no padding inside `[...]`');
    $t.parserError('$a = [ 1, 2, 3 ];', 'space after `[`');
    $t.parserError('$a = [1, 2, ];', 'space before `]`');
    $t.parserOk('$a = [\n   1, 2,\n];', 'newline before `]`');

    $t.parserError('String .random(4);', 'space before `.`');
    $t.parserError('String. random(4);', 'space after `.`');
    $t.parserError('String.\n    random(4);', 'space after `.`');
    $t.parserOk('String\n    .random(4);', 'newline before `.`');




    $t.section('Parser Errors - Templates');

    $t.parserError('T fHtml() {<',                'newline');
    $t.parserError('T fHtml() {\n  --for',        'space after `--`');
    $t.parserError('T fHtml() {\n  -- for',       'must end');
    $t.parserOk('T fHtml() {\n  {{5 }}\n}\n',     'space after `{{`');
    $t.parserOk('T fHtml() {\n  {{ 5}}\n}\n',     'space before `}}`');
    $t.parserError('T fHtml() {\n  {{ \n5 }}',    'unexpected newline');


    $t.parserError('T fHtml {\n <p class="foo>\n }',     'missing a closing quote');
    $t.parserError('T fHtml() {\n  <b>Hi</div>',    'expected `</b>`');
    $t.parserError('T fHtml() {\n  </>\n}\n',  'extra closing tag');
    $t.parserOk('T fHtml() {\n  </b>\n}\n',  'named closing tag');
    $t.parserError('F fHtml() {\n  <',              'unexpected `<`', '');


    $t.parserError('T foo() {\n',                   'missing type');

    $t.parserError('T fHtml() {\nTest\n}', 'should be indented');
    $t.parserOk('T fHtml() {\n\tTest\n}', 'tab indent');
    $t.parserOk('  T fHtml() {\n\tTest\n}', 'tab indent(4) vs space(2)');




    $t.section('Parser Errors - Assignment as Expression');

    $t.parserError('$b = 1;\n$a = $b = 3;',        'assignment can not');
    $t.parserError('$b = 1;\n$a = $b += 3;',       'assignment can not');
    $t.parserError('$a = { b: $c = 1 }',           'assignment can not');
    $t.parserError('print($a = 3);',               'assignment can not');
    $t.parserError('$a[$b = 3]',                   'assignment can not');
    $t.parserError('foreach $a = 3 as $b {}',      'assignment can not');
    $t.parserError('if $a = 3 {}',                 'assignment can not');
    $t.parserError('F foo() { return $a = 3;\n }', 'assignment can not');


    $t.section('Parser Errors - Scope');

    $t.parserError('$a = $b + 1;', 'unknown variable');
    $t.parserError('function foo() { }\nfunction foo() { }', 'already defined');
    $t.parserError('function foo() { }\nfunction fOo() { }', 'defined as `foo`');
    $t.parserError('function foo($aa, $aa) { }', 'already defined');
    $t.parserError('function foo($aa, $aA) { }', 'Variable name mismatch');

    $t.parserError('F print() {}', 'core function');
    $t.parserError('F finally() {}', 'reserved');
    $t.parserError('F else() {}', 'reserved');

    $t.parserError('$a = 1;\nF foo {\nprint($a);\n}', 'unknown variable');
    $t.parserError('F outer {\n$a = 1;\n$f = F {\nprint($a);\n};\n}', 'unknown variable');


    // TODO: fix handling of closure variables
 //   $t.parserError('$f = F foo() keep ($a) { };', 'unknown variable');


    $t.parserError('$a = $b[4];', 'unknown variable');
    $t.parserError('$fOo = 1;\n$foO = 2;', 'Variable name mismatch');
    $t.parserError('$a = $b + 1;', 'unknown variable');
    $t.parserError('$a = $a + 1;', 'unknown variable');
    $t.parserError('fOo();\nfunction foo() { }', 'case mismatch', '');
    $t.parserError('F main() { }\n$a = 1;', 'declared before functions');
    $t.parserError('@.a = 123;', 'inside of a class');
    $t.parserError('$this.a = 123;', 'inside of a class');
    $t.parserError('$a = 1;\n foreach [0] as $a {\n}', 'already defined');
    $t.parserError('foreach [0] as $a {\n}\nprint($a);', 'unknown variable');
    $t.parserError('try {\n}\ncatch $ex {\n}\nprint($ex);', 'unknown variable');
    $t.parserError('$a = 1;\nforeach [0] as $a { }', 'already defined');
    $t.parserError('foreach [0] as $a, $a { }', 'already defined');


    $t.parserOk('foreach [] as $n: print($n);\n$b = 3;', 'statement after one-liner foreach');
    $t.parserOk('if true: print(2);\n$b = 3;', 'statement after one-liner if');
    $t.parserOk('F outer {\n F fn: print(2); \n$b = 3;\n }', 'statement after one-liner function');


     // TODO: this is a runtime error.  capture this at compileTime
    //$code = '$outer = 1;\nfn();\F fn() {\nprint($outer);\n}';
    //$t.parserError($code, 'unknown variable', '');

     Perf.stop();
}

function testMisc($t) {

    $aa = 1;


    $t.section('Performance');

    // make sure autoboxed array access doesn't drastically hit performance
    Perf.start('test.perf.largeArray');
    $now = Date.now(true);
    $numEls = 1000;
    $nums = range(1, $numEls);
    $ii = 0;
    foreach $nums as $nn {
        $b = $nums[$ii];
        $ii += 1;
    }
    $t.ok($ii == $numEls, 'large loop done');
    $elapsed = Date.now(true) - $now;
    $t.ok($elapsed < 2, 'ArrayAccess loop ({0} elements) took < 2 ms'.fill($numEls));
    Perf.stop();



    $t.section('Result Objects');

    $st = Result.ok(123);
    $t.ok($st.ok(), 'not ok');
    $t.ok($st.get() == 123, 'ok value');

    $st = Result.fail(66);
    $t.ok(!$st.ok(), 'not ok');
    $t.ok($st.failCode() == 66, 'failCode');



    $t.section('Modules');

    $t.ok(TestModule.bareFun('Joe') == 'bare:Joe', 'module call - autoloaded');

    Global.foo = 'BAR';
    $t.ok(TestModule.testGlobal() == 'global:BAR', 'module global');

    $t.ok(TestModule.testModuleVar() == 'moduleVar:mod', 'module var - inside access');
    $t.ok(TestModule.moduleVar == 'mod', 'module var - outside access');


    import('subDir/OtherModule');
    $t.ok(OtherModule.ok('Joe') == 'ok:Joe', 'import from subfolder');

    $t.dies(F { import('http://tht-lang.org'); }, 'import remote url');
    $t.dies(F { import('../Foo'); }, 'import with dots');
    $t.dies(F { import('Foo%'); }, 'import with illegal char');
    $t.dies(F { import('Foo.tht'); }, 'import with tht extension');

}


function testOop($t) {

    $t.section('Classes (OOP)');

    $tc = new TestClass('green', 123);

    $t.ok($tc.getFullName() == 'green:123', 'get property');
    $t.ok($tc.html().stringify() == '<b>Hello</b>\n', 'object template');

    $t.ok($tc.getModVar() == 123, 'Module variable');
    $t.dies(F () keep ($tc) { return $tc.xField; }, 'No access to private field');

    $t.ok($tc.getId() == 123, 'getter method');
    $t.ok($tc.id == 123, 'magic getter');
    $tc.setId(345);
    $t.ok($tc.id == 345, 'setter');

    $t.ok($tc.dependency() == 'other', 'dependency');
    $t.ok($tc.dep.foo == 1, 'dependency dynamic field');
    $t.ok($tc.dep.bar == 2, 'dependency dynamic field');

    $t.dies(F () keep ($tc) { $tc.foo = 123; }, 'Fields locked after construction');
    $t.ok(TestClass.factory().getFullName() == 'factory:99', 'module factory');
    $t.ok($tc.zGetMethods().contains('getFullName'), 'zMethods');
    $tc.zCallMethod('setId', [789]);
    $t.ok($tc.zCallMethod('getId') == 789, 'zCallMethod');

    $t.ok($tc.okField == 'dynamic:okField', 'zDynamicGet ok');
    $t.dies(F () keep ($tc) { $tc.badField = 1; }, 'zDynamicGet fail');

    $t.ok($tc.getSecretNumber() == 42, 'zDynamicCall');

    $t.ok($tc.zHasMethod('setId'), 'zHasMethod true');
    $t.ok(!$tc.zHasMethod('xyz'), 'zHasMethod false');

    $t.ok($tc.zHasField('publicField'), 'zHasField true');
    $t.ok(!$tc.zHasField('xyz'), 'zHasField false');

    $t.ok($tc.dep.zGetFields().keys().join(':') == 'foo:bar', 'zGetFields');

    $meths = $tc.zGetMethods();
    $t.ok($meths.contains('getId') && $meths.contains('getFullName'), 'zGetMethods()');

    import('subDir/OtherClass');
    $oc = new OtherClass({ a1: 1, a2: 2 });

    $t.ok($oc.ok() == 'other', 'OtherClass');
    $t.ok($oc.a1 == 1 && $oc.a2 == 2, 'zSetFields');

    $t.ok(Meta.newObject('TestClass', ['green', 123]), 'Meta.new');
}


function testTypes($t) {

    $t.section('Types');

    $t.ok([].isType('list'), 'list');
    $t.ok({}.isType('map'), 'map');
    $t.ok('foo'.isType('string'), 'string');
    $n = 123;
    $t.ok($n.isType('number'), 'number');
    $f = true;
    $t.ok($f.isType('boolean'), 'boolean');
    $fn = function () { };
    $t.ok($fn.isType('function'), 'function');

    $t.ok(sql'abc'.isType('typeString'), 'typeString');

    $t.ok(r'a'.isType('regex'), 'regex');

    $t.dies(F { noReturn().type(); }, 'nothing type');


    import('subDir/OtherClass');
    $oc = new OtherClass({ a1: 1, a2: 2 });
    $t.ok($oc.isType('object'), 'object');
}


function testFunctions($t) {

    $t.section('Functions');

    F test() {
        return 'yay';
    }
    $t.ok(test() == 'yay', 'no args');

    F testA($arg) {
        return $arg ~ '!';
    }
    $t.ok(testA('hey') == 'hey!', 'with arg');

    F testB($arg = 'default') {
        return $arg ~ '!';
    }
    $t.ok(testB() == 'default!', 'default');

    F testSum() {
        $asum = 0;
        foreach Meta.arguments() as $arg {
            $asum += $arg;
        }
        return $asum;
    }
    $sum = testSum(1, 2, 3, 4);
    $t.ok($sum == 10, 'variable args');


    F withOp($foo, $bar = 'default') {
        return $bar;
    }
    $r = withOp('hello', 'world');
    $t.ok($r == 'world', 'default, supplied');

    $r = withOp('hello');
    $t.ok($r == 'default', 'default, fallback');

    $outer = 'OUT';
    $funClosure = F ($a) keep ($outer) {
        return $a ~ '/' ~ $outer;
    };
    $t.ok($funClosure('IN') == 'IN/OUT', 'closure');


    $outer = 'OUT';
    $funClosure2 = F ($a) keep ($outer) {
        $outer ~= '-append';
    };
    $funClosure2(1);
    $t.ok($outer == 'OUT-append', 'closure - modify outer');


    F addToList($list) {
        $list #= 4;
    }
    $refList = [1, 2, 3];
    addToList($refList);
    $t.ok($refList.length() == 4, 'list (object) - pass by ref - changed');

    $refList.reverse();
    $t.ok($refList[0] == 1, 'list.reverse - not changed in place');



    F addToString($s) {
        $s ~= '4';
    }
    $refStr = '123';
    addToString($refStr);
    $t.ok($refStr.length() == 3, 'string - pass by ref - unchanged');


    $fnNoReturn = F () {
        $v = noReturn();
        $v.reverse();
    };
    $t.dies($fnNoReturn, 'returned Nothing');


    F missingArgs($arg1, $arg2) { }
    $t.dies(F () { missingArgs(1); }, 'Missing argument - user function');
    $t.dies(F () { File.read(); }, 'Missing argument - module');


    $t.ok(testDefaultMap().a == 123, 'map as default arg');
    $t.ok(testDefaultMap({ a: 345 }).a == 345, 'map as default arg - with passed arg');

    $t.ok(testDefaultList()[1] == 'b', 'list as default arg');
    $t.ok(testDefaultList(['x', 'y', 'z'])[1] == 'y', 'list as default arg - with passed arg');

    $t.ok(testDefaultMaps().a == 'aa', 'multiple default args as maps');
    $t.ok(testDefaultMaps().m2.b == 'bb', 'multiple default args as maps');

    $t.parserError('function foo() { }\n $a = 1;', 'top-level');

    $t.parserError('function { }', 'must have a name');
    $t.parserError('function foo() keep ($a) { }', 'can only be used with anonymous functions');


    // argument checking

    $t.section('Function - Argument Checking');

    $t.ok($t.checkArgs('s', ''), 'string');
    $t.ok($t.checkArgs('n', 123), 'number');
    $t.ok($t.checkArgs('l', []), 'list');
    $t.ok($t.checkArgs('f', false), 'boolean');
    $t.ok($t.checkArgs('m', {}), 'map');
    $t.ok($t.checkArgs('snl', '0', 0, []), 'multi: string, number, list');

    $t.dies(F () keep ($t) { $t.checkArgs('f', true, true); }, 'Too many args');

    $t.dies(F () keep ($t)  { $t.checkArgs('m', []); }, 'Expect map.  Got List.');
    $t.dies(F () keep ($t)  { $t.checkArgs('m', 'x'); }, 'Expect map. Got String');
    $t.dies(F () keep ($t)  { $t.checkArgs('m', 123); }, 'Expect map. Got Number');
    $t.dies(F () keep ($t)  { $t.checkArgs('m', true); }, 'Expect map. Got Flag');

    $t.ok($t.checkArgs('s', 123), 'Number as string');
    $t.dies(F () keep ($t)  { $t.checkArgs('n', '123'); }, 'String as number');

    $t.dies(F () keep ($t)  { $t.checkArgs('snl', true, 123, []); }, 'Multi (snl): bad #1');
    $t.dies(F () keep ($t)  { $t.checkArgs('snl', '', '123', []); }, 'Multi (snl): bad #2');
    $t.dies(F () keep ($t)  { $t.checkArgs('snl', '', 123, 'x'); }, 'Multi (snl): bad #3');

    $a = [1, 2, 3];
    $t.ok(spread(...$a) == '1:2:3', 'spread operator (...)');


    $t.section('Function - Expression Syntax');

    $fx = x{ $a + 1 };
    $t.ok($fx(2) == 3, 'basic syntax');
    $fxs = [
        x{ $a + 10 },
        x{ $a + 100 },
    ];
    $t.ok($fxs[0](3) == 13, 'expressions in list');
    $t.ok($fxs[1](3) == 103, 'expressions in list');

    $fxJoin = [1, 2, 3].map(x{ $a + 6 }).join('');
    $t.ok($fxJoin == '789', 'functional usage');
}

function testTypeDeclarations($t) {

    $t.section('Functions - Type Declarations');

    $t.ok(takesString('a'), 'string');
    $t.ok(takesString(''), 'string');
    $t.dies(F { takesString(); }, 'string - none');

    $t.ok(takesInt(1), 'int - 1');
    $t.ok(takesInt(0), 'int - 0');
    $t.ok(takesInt(1.0), 'int - 1.0');

    $t.ok(takesFloat(1), 'float - 1');
    $t.ok(takesFloat(1.1), 'float - 1.1');
    $t.ok(takesFloat(-1.1), 'float - -1.1');

    $t.ok(takesBool(true), 'boolean - 1');
    $t.ok(takesBool(false), 'boolean - 1');

    $t.ok(takesMap({ a: 1 }), 'map - map');
    $t.ok(takesMap({}), 'map - empty map');

    $t.ok(takesList(['a']), 'list - list');
    $t.ok(takesList([]), 'list - empty list');

    $t.ok(takesFunction(F { return 1; }), 'function - function');
    $f = F { };
    $t.ok(takesFunction($f), 'function - bareword');

    $t.ok(takesObject($t), 'object');
    $t.ok(takesObject({ a: 1 }), 'object - map');

    $t.ok(takesAny(1), 'any - int');
    $t.ok(takesAny('a'), 'any - string');
    $t.ok(takesAny({}), 'any - map');

    $t.ok(takesStringDefault() == 'default', 'default');
    $t.ok(takesMultipleDefault(3) == '3,default', 'multiple');
    $t.ok(takesMultipleDefault(5, 'a') == '5,a', 'multiple, default');

    if (Php.version(true) >= 70100) {
        $t.dies(F { takesString(123); }, 'string - num');
        $t.dies(F { takesString(true); }, 'string - bool');
        $t.dies(F { takesString([]); }, 'string - list');
        $t.dies(F { takesInt(1.1); }, 'int - 1.1');
        $t.dies(F { takesFloat('1.1'); }, 'float - string');
        $t.dies(F { takesBool(1); }, 'boolean - 1');
        $t.dies(F { takesBool(0); }, 'boolean - 0 ');
        $t.dies(F { takesBool(''); }, 'boolean - ``');
        $t.dies(F { takesMap(['a']); }, 'map - list');
        $t.dies(F { takesList({ a: 1 }); }, 'list - map');
        $t.dies(F { takesObject(1); }, 'object - number');
    }
}

F takesString($val:s) {
    return true;
}

F takesBool($val:b) {
    return true;
}

F takesInt($val:i) {
    return true;
}

F takesFloat($val:f) {
    return true;
}

F takesList($val:l) {
    return true;
}

F takesMap($val:m) {
    return true;
}

F takesFunction($fnCallback:fn) {
    return $fnCallback();
}

F takesAny($val:any) {
    return true;
}

F takesObject($val:o) {
    return true;
}

F takesStringDefault($val:s = 'default') {
    return $val;
}

F takesMultipleDefault($num:i, $str:s = 'default') {
    return $num ~ ',' ~ $str;
}

function testMaps($t) {

    $t.section('Maps');

    $user = { name: 'Drac', age: 500, friends: [{ name: 'Igor' }] };
    $t.ok($user['name'] == 'Drac', 'bracket');
    $t.ok($user.get('name') == 'Drac', 'get');
    $t.ok($user.length() == 3, 'length');
    $t.ok($user.get('foo', 'bar') == 'bar', 'default');
    $t.ok($user.get(['friends', 0, 'name']) == 'Igor', 'chained');
    $t.ok($user['friends'][0]['name'] == 'Igor', 'chained brackets');
    $t.ok($user.get(['friends', 1, 'name'], false) == false, 'chained fail');
    $user['height'] = '6ft';
    $t.ok($user.get('height') == '6ft', 'put');
    $mapNum = { name: 'Frank', age: 8 };
    $t.ok($mapNum.get('age') == 8, 'numeric val');
    $mlmap = {
        name: 'Joe',
        id: 12345,
    };
    $t.ok($mlmap.id == 12345, 'multiline map');

    $mlmap['foo'] ||= 33;
    $t.ok($mlmap.foo == 33, 'default assign');

    $t.section('Maps - dot access');

    $t.ok($user.name == 'Drac', 'dot access');
    $t.dies(function () keep ($user) { print($user.nameX); }, 'dot access - missing field dies');


    $t.section('Maps - Missing values');

    $empty = { foo: 1 };
    $t.ok($empty['missing'] ~ 'yo' == 'yo', 'empty concat');
    $t.ok($empty['missing'] == '', 'empty string');
    $t.ok(!$empty['missing'] == true, 'empty bool');
    $empty['def'] ||= 'default';
    $t.ok($empty['def'] == 'default', 'empty or assign');


    // suggest key(case)
    $t.dies(F {
        $m = { name: 'foo' };
        print($m.Foo);
    }, 'Try: `name`');

    $t.section('Maps - Explicit default');

    $dmap = { foo: 1 }.default('HAY');
    $t.ok($dmap['missing'] == 'HAY', 'Map default - not found');
    $t.ok($dmap['foo'] == 1, 'Map default - found');

    $countMap = {}.default(0);
    $countMap['a'] += 100;
    $t.ok($countMap.a == 100, 'numeric default');


    $t.section('Maps - Methods');

    $map = { a: 1, b: 2 };

    $t.ok($map.hasKey('b'), 'hasKey true');
    $t.ok(!$map.hasKey('z'), 'hasKey false');

    $t.ok($map.hasValue(2), 'hasValue true');
    $t.ok(!$map.hasValue(99), 'hasValue false');

    $t.ok($map.keys().join('|') == 'a|b', 'keys');
    $t.ok($map.values().join('|') == '1|2', 'values');

    // copy / isempty
    $map2 = $map.copy();
    $map2['b'] = 3;
    $t.ok($map.b == 2, 'copy');
    $t.ok($map2.b == 3, 'copy');
    $t.ok(!$map2.isEmpty(), 'not isEmpty');
    $map2.clear();
    $t.ok($map2.isEmpty(), 'clear / isEmpty');

    // remove
    $t.ok($map.remove('b') == 2, 'delete - key exists');
    $t.ok($map.remove('Z') == '', 'delete - key nonexistent');
    $t.ok($map.keys().length() == 1, 'delete - modified map');

    // reverse
    $map = { a: 1, b: 2, c: 1 };
    $flipped = $map.reverse();
    $t.ok($flipped['1'] == 'c', 'reverse');
    $t.ok($flipped['2'] == 'b', 'reverse');
    $t.ok($flipped.length() == 2, 'reverse length');

    // slice
    $map = { a: 1, b: 2, c: 3 };
    $t.ok($map.slice(q[b c]).c == 3, 'slice()');
    $t.ok($map.slice(q[b c]).keys().join(':') == 'b:c', 'slice() keys');
    $t.ok($map.slice(q[a z]).z == '', 'slice() with missing key');

    $merged = $map.merge({ b: 8, d: 9 });
    $t.ok($merged.toList().join(',') == 'a,1,b,8,c,3,d,9', 'merge');
    $soft = $map.merge({ b: 8, d: 9 }, true);
    $t.ok($soft.toList().join(',') == 'a,1,b,2,c,3,d,9', 'merge - soft');


    $t.section('Maps - Misc Errors');

    $t.dies(F { {}.getKey('VAL'); }, 'Map value not found');
    $t.dies(F { {}.getKey(false); }, 'Map.getKey(<boolean>);');
    $t.dies(F { {}.merge(['a']); }, 'Map.merge(<list>);');
    $t.parserError('$a = {};\nprint($a.$a)', 'square brackets');


    $t.section('Lists & Maps');

    $t.ok([].isEmpty(), 'empty list');
    $t.ok({}.isEmpty(), 'empty map');
    $t.ok(![1, 2, 3].isEmpty(), 'non-empty list');
    $t.ok(!{ foo: 0 }.isEmpty(), 'non-empty map');


    // Deep copy List
    $nested = [1, [2, 3], { a: 4 }, { l: [5, 6] }];
    $dcopy = $nested.copy();

    $dcopy[0] += 1;
    $dcopy[1][0] += 1;
    $dcopy[2].a += 1;
    $dcopy[3].l[1] += 1;

    $njson = Json.encode($nested);
    $dcJson = Json.encode($dcopy);
    $t.ok($njson == '[1,[2,3],{"a":4},{"l":[5,6]}]', 'deep copy - list - orig unchanged');
    $t.ok($dcJson == '[2,[3,3],{"a":5},{"l":[5,7]}]', 'deep copy - list - modified copy');


    // Deep copy Map
    $nestMap = { a: 1, l: [2, 3], m: { a: [4, 5] } };
    $mapCopy = $nestMap.copy();

    $mapCopy.a += 1;
    $mapCopy.l[1] += 1;
    $mapCopy.m.a[1] += 1;
    $mapCopy.m['b'] = 9;

    $mapJson = Json.encode($nestMap);
    $copyJson = Json.encode($mapCopy);

    $t.ok($mapJson == '{"a":1,"l":[2,3],"m":{"a":[4,5]}}', 'deep copy - map - orig unchanged');
    $okJson = '{"a":2,"l":[2,4],"m":{"a":[4,6],"b":9}}';
    $t.ok($copyJson == $okJson, 'deep copy - map - modified copy');


    // Deep copy by reference
    $nestMap = { a: 1, l: [2, 3], m: { a: [4, 5] } };
    $mapRefCopy = $nestMap.copy(true);
    $mapRefCopy.m.a[1] = 99;
    $t.ok($nestMap.m.a[1] == 99, 'copy by reference - map');

    $nestList = [1, [2, 3], { a: 4 }, { l: [5, 6] }];
    $listRefCopy = $nestList.copy(true);
    $listRefCopy[3].l[1] = 999;
    $t.ok($nestList[3].l[1] == 999, 'copy by reference - list');

}

function testMathAndLogic($t) {

    $t.section('Math operators');

    $a = 2;
    $b = $a + 1 + 2;
    $c = $a * 3 + 1;
    $d = $a / 2;
    $e = 5 % 2;
    $f = 3 + -1;
    $g = -1 + -1;
    $h = 2 ** 4;

    $t.ok($a ==  2, 'assign');
    $t.ok($b ==  5, 'add');
    $t.ok($c ==  7, 'mult, add');
    $t.ok($d ==  1, 'divide');
    $t.ok($e ==  1, 'modulo');
    $t.ok($f ==  2, 'plus negative');
    $t.ok($h == 16, 'exponent');

    $fp = 1.1 + 2.2;
    $t.ok($fp > 3.2 && $fp < 3.4, 'floating point');

    $t.ok(1_000_000 + 2_000 == 1_002_000, '_ separator');


    $t.ok(2 + 2 * 3 == 8, 'multiply/add precendence');
    $t.ok(2 * 2 ** 3 == 16, 'exponent precendence');


    $t.section('Strict Math');

    $t.dies(F { return 'a' + 2; }, 'Add string to number');
    $t.dies(F { return 2 + 'b'; }, 'Add number to string');
    $t.dies(F { return 'a' * 2; }, 'Multiply string');
    $t.dies(F { return 'a' % 2; }, 'Modulo string');
    $t.dies(F { return true + 2; }, 'Add boolean to number');
    $t.dies(F { return {} + 2; }, 'Add Map to number');
    $t.dies(F {
        $aa = 1;
        $aa += 'v';
    }, '+= string');
    $t.dies(F { return 1 > 'a'; }, 'number > string');
    $t.dies(F { return 1 >= 'a'; }, 'number >= string');
    $t.dies(F { return 1 < 'a'; }, 'number < string');
    $t.dies(F { return 1 <= 'a'; }, 'number <= string');
    $t.dies(F { return 2 ** 'a'; }, 'number ** string');
    $t.dies(F { return 2 / 0; }, 'divide by zero');


    $t.section('Hex & Binary Numbers');

    $t.ok(0b10111 == 23, 'binary');
    $t.ok(0b10111 * 2 == 46, 'binary * dec');

    $t.ok(0x1f == 31, 'hex');
    $t.ok(0x1f * 2 == 62, 'hex * dec');



    $t.section('Truth');

    $t.ok(!false, '! false');
    $t.ok(true, 'true');
    $t.ok(true || false, '||');
    $t.ok(true && true, '&&');
    $t.ok(!(true && false), '! &&');
    $t.ok(!(false || false), '! ||');


    $t.section('Positive/Negative');

    $t.ok(-1 < 1, '< negative');
    $t.ok(1 > -1, '> negative');
    $t.ok(2 * -1 == -2, 'times negative');
    $t.ok(+2 + +2 == 4, 'unary plus');


    $t.section('Comparison');

    $t.ok(1 == 1, '==');
    $t.ok(1 != 2, '!=');
    $t.ok(1 < 2, '<');
    $t.ok(2 > 1, '>');
    $t.ok(4 >= 3, '>= gt');
    $t.ok(2 <= 3, '<= lt');
    $t.ok(3 >= 3, '>= eq');
    $t.ok(3 <= 3, '<= eq');

    $t.ok((4 <=> 2) == 1, '<=> = 1');
    $t.ok((2 <=> 4) == -1, '<=> = -1');
    $t.ok((2 <=> 2) == 0, '<=> = 0');
    $t.ok((2.1 <=> 2.0) == 1, '<=> float = 1');
    $t.ok((2.0 <=> 2.1) == -1, '<=> float = -1');
    $t.ok((2.0 <=> 2.0) == 0, '<=> float = 0');

    $str = 'moo';
    $t.ok($str <=> 'zoo'    == -1, '<=> string -');
    $t.ok($str <=> 'abcdef' ==  1, '<=> string +');
    $t.ok($str <=> 'moo'    ==  0, '<=> string =');






    $t.section('Math Assignment');

    $aa = 10;
    $aa += 10;
    $t.ok($aa == 20, '+=');
    $aa *= 2;
    $t.ok($aa == 40, '*=');
    $aa -= 30;
    $t.ok($aa == 10, '-=');
    $aa /= 2;
    $t.ok($aa == 5, '/=');
    $aa **= 2;
    $t.ok($aa == 25, '**=');


    $t.section('Number Methods');

    $num = 1234.56;
    $t.ok($num.format() == '1,235', 'format');
    $t.ok($num.format(1) == '1,234.6', 'format - numDecimals');
    $t.ok($num.format(2, '') == '1234.56', 'format - blank sep');
    $t.ok($num.format(2, ' ', ',') == '1 234,56', 'format - sep & dec');

    $t.ok($num.toString() == '1234.56', 'toString');

    $t.ok($num.toBoolean() == true, 'toBoolean');
    $t.ok((0).toBoolean() == false, 'toBoolean - false');
    $t.ok((-1).toBoolean() == true, 'toBoolean - negative');
    $t.ok((0.1).toBoolean() == true, 'toBoolean - float');

    $t.section('Float & Ints');

    $t.ok(5 == 5.0, '5 == 5.0');
    $t.ok(1.0 + 2.0 == 3.0, '1.0 + 2.0 == 3.0');

}


function testControlFlow($t) {

    Perf.start('test.controlFlow');

    $t.section('Loops');

    $s = '';
    foreach range(1, 3) as $i {
        $s ~= $i;
    }
    $t.ok($s == '123', 'for, range');

    $nums = [4, 5, 6];
    foreach $nums as $n {
        $s ~= $n;
    }
    $t.ok($s == '123456', 'for, list');

    $pairs = { a: 1, b: 2, c: 3 };
    $s = '';
    foreach $pairs as $letter, $number {
        $s ~= $number ~ $letter;
    }
    $t.ok($s == '1a2b3c', 'for, map');

    $i = 0;
    $s = '';
    loop {
        $i += 1;
        $s ~= $i;
        if $i == 3: break;
    }
    $t.ok($s == '123', 'loop - break');

    $i = 0;
    $s = '';
    loop {
        $i += 1;
        if $i == 4: continue;
        $s ~= $i;
        if $i == 5: break;
    }
    $t.ok($s == '1235', 'loop - continue');


    $i = 0;
    foreach [11, 22, 33] as $n {
        $i = $n;
        if $n > 20: break;
    }
    $t.ok($i == 22, 'foreach - break');

    $i = 0;
    foreach [11, 22, 33] as $n {
        $i = $n;
        if $n > 20: continue;
    }
    $t.ok($i == 33, 'foreach - continue');

    $t.parserError('loop {\n$a = 1;\n}\n', 'needs a \'break\'');
    $t.parserError('loop {\nloop { break; }\n}\n', 'needs a \'break\'');
    $t.parserOk('loop {\nloop { break; }\nbreak; }\n', 'nested breaks');
    $t.parserOk('F go { loop {\nreturn;\n}\n }', 'return instead of break');

    $t.parserError('$a = 1;\nbreak;', '`break` not allowed');
    $t.parserError('$a = 1;\ncontinue;', '`continue` not allowed');


    $t.section('Logic Assignment');
    $a = 0 ||: 5;
    $t.ok($a == 5, '||: false');
    $a = 2 ||: 5;
    $t.ok($a == 2, '||: true');
    $a = 0 &&: 5;
    $t.ok($a == 0, '&&: false');
    $a = 2 &&: 5;
    $t.ok($a == 5, '&&: true');
    $a = 0 ||: 2 &&: 4;
    $t.ok($a == 4, '||: &&:');
    $a = 1 &&: 0 ||: 5;
    $t.ok($a == 5, '&&: ||:');
    $a = 0 ||: '' ||: 6;
    $t.ok($a == 6, '||: ||:');
    $a = 1 &&: 2 &&: 3;
    $t.ok($a == 3, '&&: &&:');
    $a = 1;
    $a &&= 5;
    $t.ok($a == 5, '&&= true');
    $a = 0;
    $a &&= 3;
    $t.ok($a == 0, '&&= false');
    $a = 0;
    $a ||= 2;
    $t.ok($a == 2, '||= true');
    $a ||= 3;
    $t.ok($a == 2, '||= false');


    $t.section('if/else');

    $a = 1;

    if (true) { $a = 2; }
    $t.ok($a == 2, 'if true');

    if (false) { $a = 3; }
    $t.ok($a == 2, 'if false');

    if (false) {
        $a = 3;
    }
    else {
        $a = 4;
    }
    $t.ok($a == 4, 'else');

    if (false) {
        $a = 3;
    }
    else if (true) {
        $a = 5;
    }
    $t.ok($a == 5, 'else if');

    if (false) {
        $a = 3;
    }
    else if (false) {
        $a = 5;
    }
    else if (false) {
        $a = 9;
    }
    else {
        $a = 6;
    }
    $t.ok($a == 6, 'if, else if, else');


    $fnOneLine = F ($x) {
        if $x == 1:      return 10;
        else if $x == 2: return 20;
        else:            return 30;
    };

    $t.ok($fnOneLine(1) == 10, 'one-liner if/else (if)');
    $t.ok($fnOneLine(2) == 20, 'one-liner if/else (else if)');
    $t.ok($fnOneLine(3) == 30, 'one-liner if/else (else)');


    $t.section('Match');

    $fnMatch  = F ($z) {

        match $z {
            'foo'   { return 'string'; }
            r'reg'  { return 'regex'; }
            ['a', 'b'] { return 'list'; }
            $z.length() > 4  { return 'expr'; }
            default { return 'default'; }
        }
    };

    $t.ok($fnMatch('foobar') == 'expr', 'expr');
    $t.ok($fnMatch('foo') == 'string', 'string');
    $t.ok($fnMatch('regex') == 'regex', 'regex');
    $t.ok($fnMatch('none') == 'default', 'default');
    $t.ok($fnMatch('b') == 'list', 'list');

    $fnMatchOneLine  = F ($y) {
        match {
            $y == 1: return 10;
            $y == 2: return 20;
            default: return 30;
        }
    };

    $t.ok($fnMatchOneLine(1) == 10, 'match - no subject - one-line');
    $t.ok($fnMatchOneLine(2) == 20, 'match - no subject -  one-line');
    $t.ok($fnMatchOneLine(3) == 30, 'match - no subject -  one-line');


    $t.section('Misc');

    $ex = false;
    $fin = false;
    try {
        die('ERROR!');
    }
    catch ($err) {
        $ex = $err;
    }
    finally {
        $fin = true;
    }

    $t.ok($ex.message() == 'ERROR!', 'try/catch thrown');
    $t.ok($fin, 'try/catch - finally');

    $fileEx = false;
    try {
        File.read('sdfsdfsdf');
    } catch ($e) {
        $fileEx = $e.message();
    }
    $t.ok($fileEx.contains('File does not exist'), 'catch File exception');


    $t.section('Other Operators');

    $t.ok(2 > 1 ? true : false, 'ternary - true');
    $t.ok(1 > 2 ? false : true, 'ternary 0 false');

    $ifDo = 1;
    if true: $ifDo = 2;
    $t.ok($ifDo == 2, 'one-liner - true');
    if false: $ifDo = 9;
    $t.ok($ifDo == 2, 'one-liner - false');


    Perf.stop();
}

function testStrings($t) {

    Perf.start('test.strings');

    $t.section('Strings');

    $stra = '456789';
    $t.ok($stra[-1] == '9', 'substring index');

    $t.section('Multiline Strings');

    $ml = '''
        this is a
        multiline
        string.
    ''';
    $t.ok($ml.contains('multiline\nstring'), 'multiline with indent');

    $t.parserError('$a = ``` sdf', 'newline');
    $t.parserError('$a = ```\ndfg ```;', 'separate line');
    $t.parserError('$a = ```\ndfg ', 'unclosed');

    $t.section('String Concatenation');

    $t.ok('a' ~ 'b' == 'ab', 'a ~ b');
    $t.ok('a' ~  1  == 'a1', 'a ~ 1');
    $t.ok(1.2  ~ 'b' == '1.2b', '1.2 ~ b');
    $t.ok(true ~ '!' == 'true!', 'true ~ !');
    $t.ok(false ~ '!' == 'false!', 'false ~ !');

    $s = 'a';
    $s ~= 'bc';
    $t.ok($s == 'abc', '~=');


    $t.section('String Methods');

    $hi = 'Hello World!';
    $t.ok('abcdef'.reverse() == 'fedcba', 'direct string method');
    $t.ok($hi.length() == 12, 'length()');
    $t.ok($hi.charAt(1) == 'e', 'get()');
    $t.ok($hi.charAt(-1) == '!', 'get() negative');
    $t.ok($hi.contains('Hello'), 'contains()');
    $t.ok(!$hi.contains('missing'), '! contains()');
    $t.ok($hi.split('o').length() == 3, 'split()');
    $t.ok($hi.split('o')[0] == 'Hell', 'split()');
    $t.ok(String.charFromCode(65) ~ String.charFromCode(122) == 'Az', 'String.fromCharCode');


    $t.ok(''.toBoolean() == false, 'toBoolean - empty string');
    $t.ok('0'.toBoolean() == true, 'toBoolean - 0');
    $t.ok('false'.toBoolean() == true, 'toBoolean - false');
    $t.ok('true'.toBoolean() == true, 'toBoolean - true');

    $t.ok('123'.toNumber() == 123, 'toNumber');
    $t.ok('99ft'.toNumber() == 99, 'toNumber - trailing letters');

    if (!isPerfMode()) {
        $t.ok('hi'.toPassword().hash().left(3) == '$2y', 'hash');
        $t.dies(F { 'hey'.toPassword().hash().toPassword().hash(); }, 'no re-hash');
    }

    $t.section('String Methods - Unicode');

    $uni = 'ⒶⒷⒸ①②③ abc123';
    $t.ok($uni.length() == 13, 'length');

    $t.ok($uni.charAt(2) == 'Ⓒ', 'charAt');
    $t.ok($uni.charAt(-1) == '3', 'charAt negative');

    $t.ok($uni.charCodeAt(2) == 9400, 'codeAt');
    $t.ok(String.charFromCode(9400) == 'Ⓒ', 'charFromCode');
    $t.ok(String.charFromCode(65) == 'A', 'charFromCode, ascii');

    $t.ok($uni.left(3) == 'ⒶⒷⒸ', 'left');
    $t.ok($uni.right(3) == '123', 'right');

    $t.ok($uni.substring(4, 5) == '②③ ab', 'substring');
    $t.ok($uni.substring(3) == '①②③ abc123', 'substring - remainder');

    $t.ok($uni.startsWith('ⒶⒷⒸ'), 'startsWith');
    $t.ok('ab ⒶⒷ'.endsWith('ⒶⒷ'), 'endsWith');
    $t.ok('abc ⒶⒷ'.startsWith('AbC', true), 'startsWith ignoreCase');
    $t.ok($uni.endsWith('ABc123', true), 'endsWith ignoreCase');

    $t.ok(' ⒶⒷ ⒶⒷ'.indexOf('ⒶⒷ') == 1, 'indexOf');
    $t.ok(' ⒶⒷ ⒶⒷ'.indexOf('ⒶⒷ', 2) == 4, 'indexOf - offset');
    $t.ok('abc'.indexOf('BC', 0, true) == 1, 'indexOf - ignoreCase');

    $t.ok(' ⒶⒷ ⒶⒷ'.lastIndexOf('ⒶⒷ') == 4, 'lastIndexOf');
    $t.ok(' ⒶⒷ ⒶⒷ'.lastIndexOf('ⒶⒷ', 3) == 1, 'lastIndexOf - offset');
    $t.ok('abab'.lastIndexOf('AB', 0, true) == 2, 'lastIndexOf - ignoreCase');

    $t.ok('ⒶⒸ'.insert('Ⓑ', 1) == 'ⒶⒷⒸ', 'insert');
    $t.ok('ⒶⒷⒸ'.insert('①', -2) == 'Ⓐ①ⒷⒸ', 'insert negative index');

    $t.ok($uni.contains('③ a'), 'contains');
    $t.ok($uni.contains('③ ABc', true), 'contains ignoreCase');

    $t.ok('aⒷⒸ'.padLeft(5, ' ') == '  aⒷⒸ', 'pad left');
    $t.ok('aⒷⒸ'.padLeft(5) == '  aⒷⒸ', 'pad left - no char');
    $t.ok('aⒷⒸ'.padRight(5, '①') == 'aⒷⒸ①①', 'pad right char');
    $t.ok('aⒷⒸ'.pad(5, ' ') == ' aⒷⒸ ', 'pad both');
    $t.ok('aⒷⒸ'.pad(6, ' ') == ' aⒷⒸ  ', 'pad both uneven');

    $t.ok('  ⒶⒷ ①②  '.trim() == 'ⒶⒷ ①②', 'trim');
    $t.ok('③③  ⒶⒷ ①②  ③'.trim('③') == 'ⒶⒷ ①②', 'trim mask');
    $t.ok('  ⒶⒷ ①②'.trimLeft() == 'ⒶⒷ ①②', 'leftTrim');
    $t.ok('ⒶⒷ ①②  '.trimRight() == 'ⒶⒷ ①②', 'rightTrim');
    $t.ok('ⒶⒷ ①②  ③'.trimRight('③') == 'ⒶⒷ ①②', 'rightTrim mask');
    $t.ok('③ ⒶⒷ ①②'.trimLeft('③') == 'ⒶⒷ ①②', 'leftTrim mask');

    $t.ok('Abc DEF ⒶⒷⒸ'.toUpperCase() == 'ABC DEF ⒶⒷⒸ', 'upperCase');

    // NOTE: pre php 7.3, the unicode chars are not lowercased
    if (Php.version(true) >= 70300) {
        $t.ok('Abc DEF ⒶⒷⒸ'.toLowerCase() == 'abc def ⓐⓑⓒ', 'lowerCase');
    } else {
        $t.ok('Abc DEF ⒶⒷⒸ'.toLowerCase() == 'abc def ⒶⒷⒸ', 'lowerCase');
    }

    $t.ok('fòôbàř'.toUpperCase() == 'FÒÔBÀŘ', 'upperCase - extended');
    $t.ok('FÒÔBÀŘ'.toLowerCase() == 'fòôbàř', 'lowerCase - extended');

    $t.ok('ABC'.toLowerCaseFirst() == 'aBC', 'lowerCaseFirst');
    $t.ok('abc'.toUpperCaseFirst() == 'Abc', 'upperCaseFirst');

    $t.ok('ŘÔÀŘ'.toLowerCaseFirst() == 'řÔÀŘ', 'lowerCaseFirst - extended');
    $t.ok('řôàř'.toUpperCaseFirst() == 'Řôàř', 'upperCaseFirst - extended');

    $t.ok('this is a title'.toTitleCase() == 'This is a Title', 'titleCase');
    $t.ok('a title'.toTitleCase() == 'A Title', 'titleCase - starting ignoreWord');
    $t.ok('a:title'.toTitleCase() == 'A:title', 'titleCase - close punctuation');

    $t.ok('horse'.toPlural(1) == 'horse', 'plural no');
    $t.ok('horse'.toPlural(2) == 'horses', 'plural yes');
    $t.ok('boss'.toPlural(2) == 'bosses', 'plural s yes');
    $t.ok('stimulus'.toPlural(3, 'stimuli') == 'stimuli', 'plural custom');

    $t.ok('ⒶⒷⒸ123'.limit(3) == 'ⒶⒷⒸ...', 'limit');
    $t.ok('ⒶⒷⒸ123'.limit(3, '!') == 'ⒶⒷⒸ!', 'limit');

    $t.ok('Ⓐ,Ⓑ,Ⓒ'.split(',').join('|') == 'Ⓐ|Ⓑ|Ⓒ', 'split/join');
    $t.ok('Ⓐ,Ⓑ,Ⓒ'.split(',', 2).join('|') == 'Ⓐ|Ⓑ,Ⓒ', 'split/join limit');
    $t.ok('Ⓐ, Ⓑ, Ⓒ'.split(r',\s+').join('|') == 'Ⓐ|Ⓑ|Ⓒ', 'split/join regex');
    $t.ok('Ⓐ,Ⓑ,Ⓒ'.split(',', 0).length() == 3, 'split limit 0');
    $t.ok('Ⓐ,Ⓑ,Ⓒ'.split(',', -1).length() == 3, 'split limit -1');
    $t.ok('ⒶⒷⒸ'.split('').length() == 3, 'split on empty delimiter');

    $t.ok($uni.splitChars()[2] == 'Ⓒ', 'chars');

    $uniml = '''

        ① item 1
        ② item 2

        ③ item 3

    ''';
    $t.ok($uniml.splitLines().length() == 3, 'lines - count');
    $t.ok($uniml.splitLines()[1].charAt(0) == '②', 'lines - trimmed indent');
    $t.ok($uniml.splitLines(true).length() == 4, 'lines with whitespace');

    $t.ok('ⒶⒷⒸ ①②③ abc 123'.splitWords()[1] == '①②③', 'words');
    $words = 'abc,123? ok.'.splitWords(true);

    $t.ok($words.length() == 3, 'words - bare');
    $t.ok($words[2] == 'ok', 'words - bare');

    $t.ok($uni.reverse() == '321cba ③②①ⒸⒷⒶ', 'reverse');

    $t.ok('<a&b>'.encodeHtml() == '&lt;a&amp;b&gt;', 'encodeHtml');
    $t.ok('&lt;a&amp;b&gt;'.decodeHtml() == '<a&b>', 'decodeHtml');
    $esc = '&#97;&#98;&#99;&#9312;&#9313;&#9314;';
    $t.ok('abc①②③'.encodeHtml(true) == $esc, 'encodeHtml all');

    $enc = 'a%20%E2%92%B7%2F%E2%92%B8%3Ad';
    $t.ok('a Ⓑ/Ⓒ:d'.encodeUrl() == $enc, 'encodeUrl');
    $t.ok($enc.decodeUrl() == 'a Ⓑ/Ⓒ:d', 'decodeUrl');

    $t.ok('ⒶⒷⒸ①②③'.removeLeft('ⒶⒷ') == 'Ⓒ①②③', 'removeLeft');
    $t.ok('ⒶⒷⒸ①②③'.removeLeft('①') == 'ⒶⒷⒸ①②③', 'removeLeft - no');
    $t.ok('Abcdef'.removeLeft('abc', true) == 'def', 'removeLeft - ignoreCase');

    $t.ok('ⒶⒷⒸ①②③'.removeRight('②③') == 'ⒶⒷⒸ①', 'removeRight');
    $t.ok('ⒶⒷⒸ①②③'.removeRight('①') == 'ⒶⒷⒸ①②③', 'removeRight - no');
    $t.ok('abcDef'.removeRight('def', true) == 'abc', 'removeLeft - ignoreCase');




    //--------

    $t.ok('Ⓐ    Ⓑ'.squeeze() == 'Ⓐ Ⓑ', 'squeeze');
    $t.ok('Ⓐ①①①①Ⓑ①①'.squeeze('①') == 'Ⓐ①Ⓑ①', 'squeeze char');

    $t.ok('ⒶⒷⒸ {var}'.fill({ var: '①②③' }) == 'ⒶⒷⒸ ①②③', 'fill');
    $t.ok('abc {0}'.fill('123') == 'abc 123', 'fill 1 arg');
    $t.ok('abc {0} {1}'.fill('123', '456') == 'abc 123 456', 'fill 2 arg');
    $t.ok('abc {} {}'.fill(['123', '456']) == 'abc 123 456', 'fill blanks & array');


    $t.section('Strings - Checks');

    $t.ok(' \n  '.isSpace(), 'isSpace true');
    $t.ok(!'  .  '.isSpace(), 'isSpace false');
    $t.ok(!''.isSpace(), 'isSpace empty');

    $t.ok('abc def'.hasSpace(), 'hasSpace space');
    $t.ok('abc\ndef'.hasSpace(), 'hasSpace newline');
    $t.ok(!'abcdef'.hasSpace(), 'hasSpace empty');

    $t.ok(!'abc 123'.isUpperCase(), 'isUpperCase - none');
    $t.ok(!'aBc 123'.isUpperCase(), 'isUpperCase - some');
    $t.ok('ABC 123'.isUpperCase(), 'isUpperCase - all');
    $t.ok(!''.isUpperCase(), 'isUpperCase - empty');

    $t.ok(!'abc 123'.hasUpperCase(), 'hasUpperCase - none');
    $t.ok('aBc 123'.hasUpperCase(), 'hasUpperCase - some');
    $t.ok('ABC 123'.hasUpperCase(), 'hasUpperCase - all');
    $t.ok(!''.hasUpperCase(), 'hasUpperCase - empty');

    $t.ok(!'ABC 123'.isLowerCase(), 'isLowerCase - none');
    $t.ok(!'AbC 123'.isLowerCase(), 'isLowerCase - some');
    $t.ok('abc 123'.isLowerCase(), 'isLowerCase - all');
    $t.ok(!''.isLowerCase(), 'isLowerCase - empty');

    $t.ok(!'ABC 123'.hasLowerCase(), 'hasLowerCase - none');
    $t.ok('AbC 123'.hasLowerCase(), 'hasLowerCase - some');
    $t.ok('abc 123'.hasLowerCase(), 'hasLowerCase - all');
    $t.ok(!''.hasLowerCase(), 'hasLowerCase - empty');

    $t.ok('a b c'.toTokenCase() == 'a-b-c', 'tokenCase');
    $t.ok('aaBbCc'.toTokenCase() == 'aa-bb-cc', 'tokenCase - from camel');
    $t.ok('AaBbCc'.toTokenCase() == 'aa-bb-cc', 'tokenCase - from uppercamel');
    $t.ok('AA BB CC'.toTokenCase() == 'aa-bb-cc', 'tokenCase - from uppercamel');
    $t.ok('a b c'.toTokenCase('__') == 'a__b__c', 'tokenCase - delimiter');

    $t.ok('aa bb cc'.toCamelCase() == 'aaBbCc', 'camelCase');
    $t.ok('-aa-bb--cc!'.toCamelCase() == 'aaBbCc', 'camelCase - delim');
    $t.ok('aa-bb-cc'.toCamelCase(true) == 'AaBbCc', 'upperCamelCase');
    $t.ok('a b c'.toCamelCase() == 'aBC', 'camelCase - single chars');

    $t.ok('abc'.isAlpha(), 'isAlpha');
    $t.ok('abcDEF'.isAlpha(), 'isAlpha');
    $t.ok(!'abc123'.isAlpha(), 'isAlpha - w numbers');
    $t.ok(!'abc def'.isAlpha(), 'isAlpha - spaces');
    $t.ok(!''.isAlpha(), 'isAlpha - empty');

    $t.ok('abc'.isAlphaNumeric(), 'isAlphaNumeric');
    $t.ok('abcDEF'.isAlphaNumeric(), 'isAlphaNumeric');
    $t.ok('abc123'.isAlphaNumeric(), 'isAlphaNumeric - w numbers');
    $t.ok(!'abc 123'.isAlphaNumeric(), 'isAlphaNumeric - spaces');
    $t.ok(!''.isAlphaNumeric(), 'isAlphaNumeric - empty');

    $t.ok('123'.isNumber(), 'isNumber');
    $t.ok('-123'.isNumber(), 'isNumber - negative');
    $t.ok('123.45'.isNumber(), 'isNumber - float');
    $t.ok(!'123 '.isNumber(), 'isNumber - space');
    $t.ok(!'123a'.isNumber(), 'isNumber - alphanum');
    $t.ok(!'abc'.isNumber(), 'isNumber - all alpha');
    $t.ok(!''.isNumber(), 'isNumber - empty');

    $t.ok('abc 123'.isAscii(), 'isAscii');
    $t.ok(''.isAscii(), 'isAscii - empty');
    $t.ok(!'ⒶⒷⒸ'.isAscii(), 'isAscii - unicode');
    $t.ok(!'abⒸ'.isAscii(), 'isAscii - mixed');


    $t.section('Strings - Escapes');

    $t.ok('ab\cd' == 'abcd', 'string - escape normal char');
    $t.ok('ab\ncd'.match(r'ab\scd'), 'string - newline');
    $esc = '$_SERVER["REMOTE_ADDR"]';
    $t.ok(!'lot\'s\t \{\} "double $quote"'.contains('\\'), 'no leaked backslashes');
    $t.ok('Here\'s an escaped quote'.contains('\''), 'escaped quote (\\\')');
  //  $t.ok('Here`s a backtick' == 'Here\'s a backtick', 'alt apostrophe (\`)');

    $t.ok($esc.startsWith('$_SERVER'), 'prevent php vars - $_SERVER');
    $t.ok('\$abc'[0] == '$', 'prevent php vars - \\$abc');
    $t.ok('${abc}'[0] == '$', 'prevent php vars - ${abc}');


    $t.section('Strings - Regular Expressions');

    $m = 'abc 123';
    $t.ok($m.split(r'\s')[1] == '123', 'split regex');
    $t.ok($m.match(r'(\w+) (\d+)')[0] == 'abc 123', 'match - full capture');
    $t.ok($m.match(r'(\w+) (\d+)')[1] == 'abc', 'match - capture group 1');
    $t.ok($m.match(r'(\w+) (\d+)')[2] == '123', 'match - capture group 1');
    $t.ok($m.match(r'(\S+)$')[1] == '123', 'regex with dollar');
    $t.dies(F { 'longstringlongstring'.find(r'(?:\D+|<\d+>)*[!?]'); }, 'regex error');

    $multi = 'one\ntwo\nthree';
    $t.ok($multi.split(r'\s').length() == 3, 'Newline regex');

    $cased = 'hello WORLD';
    $t.ok($cased.match(r'world'.flags('i'))[0] == 'WORLD', 'regex object');

    $ticks = 'hello `WORLD`';
    $t.ok($ticks.match(r'`(\w+)`')[1] == 'WORLD', 'regex with backticks');

    $escTicks = 'hello \`WORLD\`';
    $t.ok($escTicks.replace(r'\`(\w+)\`', 'THERE') == 'hello THERE', 'escaped backticks');

    $t.ok('ab  cd e'.replace(r'\s+', '-') == 'ab-cd-e', 'replace');

    $rx = new Regex('`{}`'.fill('world'), 'i');
    $t.ok($ticks.replace($rx, 'VAR') == 'hello VAR', 'replace with variable');

    $cb = x{ $a[1].toUpperCase() ~ '!' };
    $t.ok('foo 123'.replace(r'(\w+)', $cb) == 'FOO! 123!', 'replace with callback');
    $t.ok('foo 123'.replace(r'(\w+)', $cb, 1) == 'FOO! 123', 'replace with callback - limit 1');

    $t.ok('abc 123'.replace(r'(\w+) (\d+)', '$1 | $2') == 'abc | 123', 'replace with $1, $2');


    $mult = 'a:123|b:456|c:789';
    $matches = $mult.matchAll(r'(\w):(\d+)');
    $t.ok($matches[2][1] == 'c' && $matches[2][2] == '789', 'matchAll');

    $matches = $mult.matchAll(r'(\d+)NO(\d+)');
    $t.ok(!$matches, 'matchAll - none');

    $t.section('Strings - Civilize');

    $t.ok('PLS HELP HELP'.civilize() == 'Pls help help', 'PLS HELP HELP');
    $t.ok('I work at NASA'.civilize() == 'I work at NASA', 'I work at NASA');
    $t.ok('ok?!!!'.civilize() == 'ok?!', 'ok?!!!');
    $t.ok('hey.....'.civilize() == 'hey...', 'hey.....');

    $long = 'aaaaaaaaaaaaaaaaaaaaAAAAAAAAAAAAAAAAAARRRRRRRRRGGGGGGHHHHHHHHHHHHHH';
    $t.ok($long.civilize() == 'Aaaarrrggghhh', 'long string, mixed');

    $long2 = 'zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz';
    $t.ok($long2.civilize() == 'zzz', 'long string all same');

    $long3 = 'asdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdd';
    $t.ok($long3.civilize() == 'asdasdasdasdasdasdasdasdasdasd', 'long cycled asdasd');

    $longUrl = '''
        Here is my song: https://www.beepbox.co/#6n42s0kbl00e07t7m1a7g0fj7i1r3o321100T0w1f1d1c0h2v0T0w8f1d1c0h0v0T0w7f1d1c0h0v0T0w2f1d1c0h0v0T0w2f1d1c0h0v0T0w1f1d1c0h0v0T1d2c1AbF7B0V1Q5342Pffe8E131
    ''';
    $t.ok($longUrl.civilize() == $longUrl, 'keep URL');

    Perf.stop();
}

F testTypeStrings($t) {

    $t.section('TypeStrings');

    $t.ok(sql'abc'.isType('typeString'), 'isType(`typeString`)');

    $t.dies(F { return plain'a' ~ 'b'; }, 'Can`t combine');
    $t.dies(F { return 'a' ~ plain'b'; }, 'Can`t combine');
    $t.dies(F { return url'a' ~ cmd'b'; }, 'Can`t combine');

    $lock1 = plain'1={},';
    $lock2 = plain'2={}';
    $combined = $lock1 ~ $lock2;
    $combined.fill(['a', 'b']);
    $t.ok($combined.stringify() == '1=a,2=b', 'combined TypeStrings');

    $t.ok(tagHtml('a').stringType() == 'html', 'stringType');
    $t.ok(sql'x'.stringType() == 'sql', 'stringType');

    $t.dies(F { return url'page?foo={}'; }, 'dynamic query hardcoded in url string');

    $lUrl = url'http://test.com/'.query({ foo: 'val`s' });
    $lCmd = cmd'xget {} > file.txt'.fill($lUrl);
    $lHtml = deepEscHtml($lCmd);
    $escOut = '<b>xget &apos;http://test.com/?' ~ 'foo=val%27s&apos; &gt; file.txt</b>\n';
    $t.ok($lHtml.stringify() == $escOut, 'recursive escaped stringify()');
}

F testUrlTagStrings($t) {

    $t.section('Url TagStrings');

    $lUrl = url'http://test.com/';
    $lUrl.query({ test: 123, foo: 'a b' });
    $t.ok($lUrl.scheme() == 'http', 'get scheme');
    $t.ok($lUrl.port() == 80, 'get port');
    $t.ok($lUrl.host() == 'test.com', 'get host');
    $t.ok($lUrl.origin() == 'http://test.com', 'get host');
    $t.ok($lUrl.isAbsolute(), 'isAbsolute = true');
    $t.ok(!$lUrl.isRelative(), 'isRelative = false');
    $sUrl = $lUrl.stringify();
    $t.ok($sUrl.contains('?test=123&foo=a%20b'), 'query add');

    $relUrl = url'/path/page';
    $t.ok(!$relUrl.isAbsolute(), 'isAbsolute = false');
    $t.ok($relUrl.isRelative(), 'isRelative = true');

    $changeUrl = url'http://asite.com/home';
    $changeUrl.host('othersite.com');
    $changeUrl.scheme('https');
    $changeUrl.path('/other/path');
    $changeUrl.query({ baz: 999 });
    $sChanged = $changeUrl.stringify();
    $t.ok($sChanged == 'https://othersite.com/other/path?baz=999', 'overrided parts');

    $t.ok(url'/page'.link('hey').stringify() == '<a href="/page">hey</a>', 'link()');

    $mixedQuery = url'/path?foo=123'.query({ bar: 456 });
    $t.ok($mixedQuery.stringify() == '/path?foo=123&bar=456', 'url: mixed query');

    $t.ok(url'/foo#abc'.hash() == 'abc', 'hash get');
    $t.ok(url'/foo#abc'.hash('xyz').stringify() == '/foo#xyz', 'hash set');
    $t.ok(url'/foo?a=1#abc'.hash('X,Y,Z,').hash() == 'x-y-z', 'hash set & sanitize');

    $toRelUrl = url'http://mysite.com/path/home'.toRelative();
    $t.ok($toRelUrl.stringify() == '/path/home', 'toRelative');
    $t.ok($toRelUrl.toRelative().stringify() == '/path/home', 'toRelative `/path/home`');
    $t.ok(url'path/home'.toRelative().stringify() == '/path/home', 'toRelative `path/home`');
    $t.ok(url'/'.toRelative().stringify() == '/', 'toRelative `/`');
    $originUrl = url'http://site.com'.toRelative().stringify();
    $t.ok($originUrl == '/', 'toRelative `http://site.com`');

    $urlWithQuery = url'/foo'.query({ a: 1 });
    $urlWithQuery.clearQuery();
    $t.ok($urlWithQuery.stringify() == '/foo', 'clearQuery');


    $t.section('UrlQuery');

    $qUrl = url'/page?name=test&num=123';
    $t.ok($qUrl.query().get('name') == 'test', 'get, default rule');
    $t.ok($qUrl.query().get('num', 'i') == 123, 'get, i');
    $t.ok($qUrl.query().get('name', 'i') == 0, 'get, i, default');

    $qUrl.query().set({ num: 999, flag: true });
    $t.ok($qUrl.query().get('num', 'i') == 999, 'set i');
    $t.ok($qUrl.query().get('flag', 'b') == true, 'set b');

    $sqUrl = $qUrl.stringify();
    $t.ok($sqUrl == '/page?name=test&num=999&flag=1', 'query() + stringify()');

    $sxUrl = url'/page?foo=123';
    $sxUrl.query().set({ foo: 999, other: 'yes' }, true);
    $t.ok($sxUrl.stringify() == '/page?foo=123&other=yes', 'soft set');

    $otherUrl = url'/page'.query({ z: 99 });
    $sxUrl.query($otherUrl);
    $t.ok($sxUrl.stringify() == '/page?foo=123&other=yes&z=99', 'get from other Url');

    $otherUrl.query({ z: 333 });
    $sxUrl.query($otherUrl.query());
    $t.ok($sxUrl.stringify() == '/page?foo=123&other=yes&z=333', 'get from other UrlQuery');

    $fQuery = url'/page?foo=123&bar=xyz'.query();
    $t.ok($fQuery.hasField('foo'), 'hasField');
    $t.ok(!$fQuery.hasField('no'), 'not hasField');
    $t.ok($fQuery.fields().join('|') == 'foo|bar', 'fields');

    $kQuery = url'/page?a=11&b=22&c=33'.query();
    $kQuery.keep(['b', 'c']);
    $t.ok($kQuery.stringify() == '?b=22&c=33', 'keep');

}

template deepEscHtml($val) {
    <b>{{ $val }}</>
}

function testLists($t) {

    $t.section('Lists');

    $ary = [1, 2, 3, 4, 5];
    $t.ok([4, 5, 6].reverse()[2] == 4, 'direct list method');
    $t.ok($ary.length() == 5, 'size');
    $t.ok($ary.get(2) == 3, 'at');
    $t.ok($ary.get(10, 9) == 9, 'default');
    $t.ok($ary[1] == 2, 'direct');
    $t.ok($ary.join(':') == '1:2:3:4:5', 'join');
    $t.ok($ary.reverse().join(':') == '5:4:3:2:1', 'reverse');
    $aryExtraComma = [
        6, 7, 8, 9,
    ];
    $t.ok($aryExtraComma.join(':') == '6:7:8:9', 'trailing comma');
    $t.ok($ary[-2] == 4, 'negative index');
    $t.ok($ary.lastIndex() == 4, 'lastIndex');
    $t.ok([].lastIndex() == -1, 'lastIndex empty');

    $ary[0] = 99;
    $t.ok($ary[0] == 99, 'direct set');

    $mlary = [
        'hello',
        { name: 'world' },
        'yay',
    ];

    $t.ok($mlary[1]['name'] == 'world', 'multiline array');



    // copy
    $copyAryA = [1, 2];
    $copyAryB = $copyAryA.copy();
    $copyAryA[0] = 11;
    $copyAryB[0] = 22;

    $t.ok($copyAryA[0] == 11 && $copyAryB[0] == 22, 'copy');

    // insert / remove
    $ary = [1, 2, 3];

    $t.ok($ary.push(40)[3] == 40, 'push');
    $t.ok($ary.pop() == 40, 'pop');

    $t.ok($ary.insert(-10, 0)[0] == -10 && $ary.length() == 4, 'add index 0');
    $t.ok($ary.remove(0) == -10 && $ary.length() == 3, 'remove index 0');

    $ary = [1, 2, 3];
    $t.ok($ary.insert(40, -1)[3] == 40, 'add index -1');
    $ary.pop();
    $t.ok($ary.insert(40, -2)[2] == 40, 'add index -2');

    $t.ok([0, 1, 2].remove(-1) == 2, 'remove index -1');
    $t.ok([0, 1, 2].remove(-2) == 1, 'remove index -2');

    $t.ok([0, 1, 2].remove(0, 2).join('|') == '0|1', 'remove index 0, items = 2');
    $t.ok([0, 1, 2].remove(-2, 2).join('|') == '1|2', 'remove index -2, items = 2');

    $ary = [1, 2, 3];
    $ary.pop();
    $t.ok($ary.length() == 2 && $ary.last() == 2, 'length after pop');

    $ary.pushAll([3, 4]);
    $t.ok($ary.length() == 4 && $ary.last() == 4, 'pushAll');

    $ary = [1, 2, 3];
    $ary.insertAll([10, 11], 2);
    $t.ok($ary.length() == 5 && $ary[2] == 10 && $ary.last() == 3, 'insertAll');

    $ary = [1, 2, 3];
    $ary.insertAll([10, 11], -2);
    $t.ok($ary.length() == 5 && $ary[2] == 10 && $ary.last() == 3, 'insertAll - negative');

    // slice
    $t.ok([0, 1, 2, 3].slice(1).join('|') == '1|2|3', 'slice');
    $t.ok([0, 1, 2, 3].slice(-2).join('|') == '2|3', 'slice -2');
    $t.ok([0, 1, 2, 3].slice(1, 2).join('|') == '1|2', 'slice w length');


    // Quoted Lists
    $t.ok(q[ aa bb  'cc' ][1] == 'bb', 'quoted list');
    $t.ok(q[ aa bb  'cc' ][2] == '`cc`', 'quoted list + quotes');
    $ml = q[
        aa bb
        'cc'
    ];
    $t.ok($ml[1] == 'bb', 'multiline quoted list');
    $t.ok($ml[2] == '`cc`', 'multiline quoted list + quotes');



    $t.section('Lists - Sorting');

    // sort
    $t.ok(['a', 'b', 'c'].sort().join('|') == 'a|b|c', 'sort');
    $t.ok(['1', '2', '10'].sort().join('|') == '1|2|10', 'sort numeric strings');

    $list = q[ a b c ].sort(x{ $b <=> $a });
    $t.ok($list.join('|') == 'c|b|a', 'sort function');

    $list = [1, 3, 2].sort({ reverse: true });
    $t.ok($list.join('|') == '3|2|1', 'reverse sort');

    $list = [1, 3, 2].sort({ reverse: false });
    $t.ok($list.join('|') == '1|2|3', 'non-reverse sort');

    $list = ['a1', 'a10', 'a2'].sort({ type: 'natural' });
    $t.ok($list.join('|') == 'a1|a2|a10', 'natural sort');

    $list = ['a1', 'a10', 'a2'].sort({ type: 'regular' });
    $t.ok($list.join('|') == 'a1|a10|a2', 'regular sort');

    $t.dies(F { ['a'].sort({ type: 'nope' }); }, 'unknown sort type');

    $list = ['a1', 'A2', 'a3', 'A4'].sort({ type: 'stringCase' });
    $t.ok($list.join('|') == 'A2|A4|a1|a3', 'case sensitive');




    $t.section('Lists - Size Errors');

    $t.dies(F { [1, 2].remove(3); }, 'remove()');
    $t.dies(F { [].remove(); }, 'empty');
    $t.dies(F { [1].sublist(2); }, 'sublist');
    $t.dies(F { [1].first(2); }, 'last');
    $t.dies(F { [1].last(2); }, 'first');


    $t.section('Lists - Misc');

    $t.ok(q[a a b c d d].unique().join(':') == 'a:b:c:d', 'unique');

    $defaultList = ['a', 'b'].default('Z');
    $t.ok($defaultList[0] == 'a', 'default, normal');
    $t.ok($defaultList[99] == 'Z', 'default, missing');


    $t.section('Lists - Functional');

    $t.ok([1, 2, 3].map(F ($a) { return $a * 2; }).join(':') == '2:4:6', 'map');
    $t.ok([1, 2, 3].reduce(F ($a, $i) { return $i + $a; }, 3) == 9, 'reduce');
    $t.ok([1, 2, 3, 4].filter(F ($a) { return $a % 2; }).join(':') == '1:3', 'filter');

    $mdl = [1, 2, [], [3, 4], [[5, 6], [7, 8]]];
    $t.ok($mdl.flat(99).join('') == '12345678', 'flat');
    $t.ok([1, [2, [3]]].flat().length() == 3, 'flat(1)');

    $table = [{ a: 20 }, { a: 70 }, { a: -30 }];
    $tableVals = $table.sortTable('a').map(x{ $a.a }).join(',');
    $t.ok($tableVals == '-30,20,70', 'tableSort by map');

    $table = [[1, 50], [2, -30], [3, 10]];
    $tableVals = $table.sortTable(1).map(x{ $a[1] }).join(',');
    $t.ok($tableVals == '-30,10,50', 'tableSort by index');
    $tableVals = $table.sortTable(1, true).map(x{ $a[1] }).join(',');
    $t.ok($tableVals == '50,10,-30', 'tableSort by index (DESC)');
}

function testTemplates($t) {

    $t.section('Templates');

    $htmlUsers = templateHtml(['Frodo', 'Sam', 'Gandalf']).stringify();
    $t.ok($htmlUsers.match(r'<li>Frodo.*?<li>Sam.*?<li>Gandalf'), 'template - loop & variables');
    $htmlUsers = templateHtml(['Frodo', '<b>Sam</b>', 'Gandalf']);
    $t.ok($htmlUsers.stringify().contains('&lt;b&gt;Sam'), 'template with html escapes');

    $p = Web.parseHtml(html'<h1>> Hello\n<.abc>> 123');
    $p = $p.stringify();
    $t.ok($p.contains('<h1>Hello</h1>'), 'parse html string - double arrow');
    $t.ok($p.contains('<div class=`abc`>123</div>'), 'parse html string - dotted');


    $t.section('Template Escaping');

    $t.ok(entHtml().stringify().contains('&gt;'), 'html - entity');
    $t.ok(formatBlockHtml().stringify().contains('&lt;foo&gt;'), 'html - format block');
  //  $t.ok(bsHtml().unlock().contains('a\nb\nc'), 'html - newlines');
    $h = expHtml('"\'', 'a&b"').stringify();
    $t.ok($h.contains('<p "&quot;&apos;">'), 'html - tag attribute');
    $t.ok($h.contains('a&amp;b'), 'html - outer');

    $t.ok(tagsHtml(inCss()).stringify().contains('<style'), 'html - css style block');
    $t.ok(tagsHtml(inJs()).stringify().contains('<script'), 'html - js block');
    $t.ok(tagsHtml(entHtml()).stringify().contains('<p>2 &gt; 1</p>'), 'html - embed html');

    $ls = html'<p>a &gt; c</p>';
    $t.ok(tagsHtml($ls).stringify().contains('<p>a &gt; c</p>'), 'html - TagString');

    $t.ok(dataJs('string').stringify().contains('"string";'), 'js - string');
    $t.ok(dataJs('a\nb').stringify().contains('"a\\nb";'), 'js - string newline');
    $t.ok(dataJs('a"b').stringify().contains('"a\\"b";'), 'js - string quote');

    $t.ok(dataJs(1234).stringify().contains('1234;'), 'js - num');
    $t.ok(dataJs(true).stringify().contains('true;'), 'js - bool');
    $t.ok(dataJs({ a: 1 }).stringify().contains('{"a":1};'), 'js - object');


   // print($tagsHtml(entHtml()).unlock());
}

function testBitwise($t) {

    $t.section('Bitwise Operators');

    $t.ok((1 +| 2) == 3, 'bitwise Oreturn (+|)');
    $t.ok((2 +& 3) == 2, 'bitwise AND (+&)');
    $t.ok((1 +^ 2) == 3, 'bitwise XOreturn (+^)');

    $t.ok(+~5 == -6, 'bitwise NOT (+~)');

    $t.ok((3 +< 2) == 12, 'bitwise shift LEFT (+<)');
    $t.ok((13 +> 2) == 3, 'bitwise shift RIGHT (+>)');

    $t.ok((0b100 +| 0b010) == 0b110, 'OR (+|) with binary number');
    $t.ok((0b100 +& 0b110) == 0b100, 'AND (+&) with binary number');
    $t.ok((0b100 +^ 0b110) == 0b010, 'XOR (+^) with binary number');
    $t.ok((+~0b110) == -7, 'NOT (+~) with binary number');
}


function libFile($t) {

    $t.section('Module: File');

    $t.dies(F { File.exists('../bad.txt'); }, 'parent shortcut (..)');
    $t.dies(F { File.read('http://yahoo.com'); }, 'stop remote file read');
    $t.dies(F { File.exists(''); }, 'empty path');
    $t.dies(F { File.exists('./path'); }, 'dotted relative path');
    $t.dies(F { File.exists('/passwd'); }, 'outside of sandbox');

    $t.ok(!File.exists('sdf/sdf'), 'Missing file does not exist');
    $t.ok(!File.isFile('sdf/sdf'), 'Missing path is not a file');
    $t.ok(!File.isDir('sdf/sdf'), 'Missing path is not a dir');

    $f = 'testFile.txt';
    $d = 'testDir';

    if (File.exists($d)) {
        File.deleteDir($d);
    }
    File.makeDir($d);
    $t.ok(File.isDir($d), 'make dir');

    $p = File.joinPath($d, $f);

    File.write($p, '12345');
    $t.ok(File.getSize($p) == 5, 'File size');
    $t.ok(File.exists($p), 'File exists');
    $t.ok(File.isFile($p), 'File is file');

    $info = File.parsePath($p);

    $t.ok($info.dirList.last() == $d, 'Path info dirList has parent dir');
    $t.ok($info.fileExt == 'txt', 'Path info extension');
    $t.ok($info.fileName == 'testFile.txt', 'Path info fileName');
    $t.ok($info.fileNameShort == 'testFile', 'Path info shortFileName');

    // $t.ok(File.parsePath('././profile.png').dirList.length() == 0, 'remove . from path');

    File.delete($p);
    $t.ok(!File.exists($p), 'File deleted');

    File.deleteDir($d);
    $t.ok(!File.exists($d), 'Dir deleted');

    $t.ok(File.appRoot().right(4) == '/app', 'appRoot');
    $t.ok(File.documentRoot().right(7) == '/public', 'documentRoot');

    $t.ok(File.getMimeType('testFile.txtx') == 'text/plain', 'mime: text/plain');
    $t.ok(File.getMimeType('testFile.pdfx') == 'application/pdf', 'mime: application/pdf');

    $t.ok(File.extensionToMimeType('png') == 'image/png', 'ext to mime');
    $t.ok(File.extensionToMimeType('.pdf') == 'application/pdf', 'ext with dot to mime');
    $t.ok(File.extensionToMimeType('foo') == 'application/octet-stream', 'ext to mime: default');

    $t.ok(File.mimeTypeToExtension('image/png') == 'png', 'mime to ext');
    $t.ok(File.mimeTypeToExtension('text/html') == 'html', 'mime to ext: dupe');
    $t.ok(File.mimeTypeToExtension('asdasdsd') == '', 'mime to ext: none');
}


function libDate($t) {

    $t.section('Module: Date');

    $t.ok(Date.now() > 1490000000, 'Date.now');
    $t.ok(Date.minutes(3) == 180, 'minutes');
    $t.ok(Date.hours(2) == 7200, 'hours');
    $t.ok(Date.days(3) == 259200, 'days');
    $t.ok(Date.toMinutes(90) == 1.5, 'inMinutes');
    $t.ok(Date.toHours(7200) == 2, 'inHours');
    $t.ok(Date.toDays(259200) == 3, 'inDays');
    $t.ok(Date.format('%Y-%m-%d %H:%M:%S', 1400000000) == '2014-05-13 09:53:20', 'Date.format');
    $t.ok(Date.difference(100, 280) == '3 minutes', 'Date.difference');
}

function libDb($t) {

    $t.section('Module: Db');

    Db.query(sql'CREATE TABLE IF NOT EXISTS test (key, value);');
    Db.query(sql'delete from test');

    $key = 'test' ~ Math.random(0, 1000);
    Db.insertRow('test', { key: $key, value: Date.now() });

    $rows = Db.selectRows(sql'select * from test');
    $t.ok($rows.length() == 1, 'Insert & select row');
    $t.ok($rows[0].key == $key, 'Check inserted row');

    $dbh = Db.use('default');
    $rows = $dbh.selectRows(sql'select * from test');
    $t.ok($rows[0].key == $key, 'Db.use');

    Db.updateRows('test', { key: $key, value: 'new!' }, sql' key = {}'.fill($key));
    $row = Db.selectRow(sql'select * from test where key = {}'.fill($key));
    $t.ok($row['value'] == 'new!', 'Update row');

    Db.deleteRows('test', sql'key = {}'.fill($key));
    $rows = Db.selectRows(sql'select * from test');
    $t.ok($rows.length() == 0, 'Delete row');

    $t.dies(F () keep ($key) {
        Db.updateRows('"bad', { key: $key }, sql' key = {}'.fill($key));
    }, 'invalid table name - updateRows');

    $t.dies(F () keep ($key) {
        Db.deleteRows('"bad', sql' key = {}'.fill($key));
    }, 'invalid table name - deleteRows');

    $t.dies(F {
        Db.query('delete from test');
    }, 'reject stringify query - query');

    $t.dies(F {
        Db.selectRows('select * from test');
    }, 'reject stringify query - selectRows');
}

function libJconTest($t) {

    $t.section('Module: Jcon');

    $d = Jcon.parse('{\nkey: value\n}\n');
    $t.ok($d.key == 'value', 'string value');

    $d = Jcon.parse('{\nkey: true\n}\n');
    $t.ok($d.key == true, 'true value');

    $d = Jcon.parse('{\nkeyA: valA\nkeyB: valB\n}\n');
    $t.ok($d.keyB == 'valB', '2nd key');

    $d = Jcon.parse('{\nkey: false\n}\n');
    $t.ok($d.key == false, 'false value');

    $d = Jcon.parse('{\nkey: 1234.5\n}\n');
    $t.ok($d.key == 1234.5, 'num value');

    $d = Jcon.parse('{\nkey: [\nv1\nv2\nv3\n]\n}\n');
    $t.ok($d.key.length() == 3, 'list value');
    $t.ok($d.key[2] == 'v3', 'list value');

    $d = Jcon.parse('{\nkey: \'\'\'\nThis is\nmultiline\n\'\'\'\n}\n');
    $t.ok($d.key.contains('\nmultiline'), 'multiline value');

    $d = Jcon.parse('{\nkeyLite: \'\'\'\n## Heading!\n\'\'\'\n}\n');
    $t.ok($d.keyLite.stringify().contains('<h2>'), 'Litemark value');
}

function libJs($t) {

    $t.section('Module: Js');

    $t.ok(Js.plugin('colorCode').stringify().contains('highlight'), 'colorCode');
    $t.ok(Js.plugin('lazyLoadImages').stringify().contains('img'), 'lazyLoadImages');
    $t.ok(Js.minify('/* comment */\n\n$a = `//`;\n   // line  \n') == '$a=`//`;', 'minify');
}

function libJson($t) {

    $t.section('Module: Json');

    $t.ok(Json.decode('{"k1":[123,"hello"]}')['k1'][1] == 'hello', 'decode sub-list');
    $t.ok(Json.decode('{"k1":{"k2":"hello"}}')['k1']['k2'] == 'hello', 'decode sub-map');
    $t.ok(Json.decode('[1,2,3]')[1] == 2, 'decode list');
    $t.ok(Json.decode('true') == true, 'decode boolean');
    $t.ok(Json.decode('123.45') == 123.45, 'decode number');

    $st = Json.encode({ a: 'hi', b: [1, 2, 3] });
    $t.ok($st.contains('"hi"'), 'encode string');
    $t.ok($st.contains('[1,2,3]'), 'encode list');
    $t.ok($st.contains('"b":'), 'encode key');

    $obj = Json.decode($st);
    $t.ok($obj.b[1] == 2, 'decode after encode');
}

function libLitemark($t) {

    $t.section('Module: Litemark');

}

function libMath($t) {

    $t.section('Module: Math');

    $rand = Math.random(6, 8);
    $t.ok($rand >= 6 && $rand <= 8, 'random');
    $t.ok(Math.floor($rand) == $rand, 'random is int');

    $rnd = Math.random();
    $t.ok($rnd >= 0.0 && $rnd < 1.0, 'random float');

    $t.ok(Math.round(Math.pi(), 2) == 3.14, 'rounded pi');
    $t.ok(Math.round(2.6) == 3, 'round up to int');
    $t.ok(Math.round(2.4) == 2, 'round down to int');

    $t.ok(Math.clamp(5, 1, 10) == 5, 'clamp in boundary');
    $t.ok(Math.clamp(20, 1, 10) == 10, 'clamp max');
    $t.ok(Math.clamp(-20, 1, 10) == 1, 'clamp min');

    $t.ok(Math.min(1, 3, 5) == 1, 'min');
    $t.ok(Math.min([1, 3, 5]) == 1, 'min list');

    $t.ok(Math.max(1, 3, 5) == 5, 'max');
    $t.ok(Math.max([1, 3, 5]) == 5, 'max list');

    $t.ok(Math.convertBase(21, 10, 2) == '10101', 'convertBase: dec to bin');
    $t.ok(Math.convertBase('1af9', 16, 10) == 6905, 'convertBase: hex to dec');

    $t.ok(Math.roundStep(123, 100) == 100, 'roundStep(123, 100) == 100');
    $t.ok(Math.roundStep(123, -100) == 100, 'roundStep(123, -100) == 100');
    $t.ok(Math.roundStep(123, 0) == 123, 'roundStep(123, 0) == 123');
    $t.ok(Math.roundStep(200, 200) == 200, 'roundStep(200, 200) == 200');
    $t.ok(Math.roundStep(-23,  10) == -30, 'roundStep(-23, 10) == -30');
    $t.ok(Math.roundStep(3.8, 0.5) == 3.5, 'roundStep(3.8, 0.5) == 3.5');
}

function libMeta($t) {
    $t.section('Module: Meta');

    $t.ok(Meta.functionExists('libMeta'), 'functionExists');
    $t.ok(Meta.callFunction('metaCallMe', ['a', 'b']) == 'a|b', 'callFunction & arguments');

    // TODO: templateMode spills over after error
    $t.ok(Meta.noTemplateMode(), 'noTemplateMode ok');
    $t.dies(F { failModeHtml(); }, 'noTemplateMode fail');

    $t.ok(Meta.functionExists('dynamicFunction'), 'dynamic function exists');
    $t.ok(Meta.callFunction('dynamicFunction', ['Hey']) == 'Hey!!!', 'call dynamic function');

    $t.ok(Meta.thtVersion().match(r'\d+\.\d+\.\d+'), 'thtVersion');
    $t.ok(Meta.thtVersion(true) >= 300, 'thtVersion - numeric');
}

function metaCallMe() {
    $args = Meta.arguments();
    return $args.join('|');
}

function failTemplateMode() {
    Meta.noTemplateMode();
}

template failModeHtml() {
    -- failTemplateMode();
}


// function libPerf($t) {
//       $t.section('Module: Perf');

//       Perf.forceActive(true);
//       Perf.start('test.perfModule');
//       System.sleep(1);
//       Perf.stop(true);

//       $res = Perf.results(true);
//       $found = false;
//       for (r in res.single) {
//           if (r.task == 'testPerf') {
//               found = true;
//               break;
//           }
//       }
//       $t.ok(found, 'Perf task & results');

//       Perf.forceActive(false);
// }

function libPhp($t) {

    $t.section('Module: Php');

    $t.ok(Php.version().match(r'\d+\.\d+\.\d+'), 'PHP version');
    $t.ok(Php.version(true) >= 50500, 'PHP version - numeric');

    $fl = Php.options(['PATHINFO_FILENAME', 'PATHINFO_BASENAME']);
    $t.ok($fl == 10, 'PHP - constant flags');

    $t.ok(Php.call('strrev', 'abcdef') == 'fedcba', 'call');
    $t.dies(F () { Php.call('nonexistent', 1, 2); }, 'Non-existent PHP call');
    $t.dies(F () { Php.call('eval', 'print("hi");'); }, 'stop blacklisted function - by name');
    $t.dies(F () { Php.call('ini_set', 'x', 'y'); }, 'stop blacklisted function - by match');


    Php.require('vendor/testVendorClass.php');

    $vc = Php.new('Abc/VendorClass');
    $t.ok($vc.takeArray([1, 2, 3]) == 1, 'Vendor class - take array');
    $t.ok($vc.returnArray([1, 2, 3])[0] == 'a', 'Vendor class - return array');
    $t.ok($vc.returnRecords().remove(0)['color'] == 'Red', 'Vendor class - recursive arrays');
    $t.ok($vc.returnObject().callMe() == 'abc', 'Vendor subClass');

    $t.ok($vc.zSet('ALL_CAP_FIELD', 789), 'Vendor class - ALL_CAP_FIELD');
    $t.ok($vc.zGet('ALL_CAP_FIELD') == 789, 'Vendor class - ALL_CAP_FIELD');
    $t.ok($vc.zCall('ALL_CAP_METHOD') == 'FOO', 'Vendor class - ALL_CAP_METHOD');

    $t.dies(F { print(Php.version); }, 'version()');

    $t.ok(Php.functionExists('strpos'), 'function exists');
    $t.ok(!Php.functionExists('strposxx'), 'function exists (not)');
    $t.ok(Php.classExists('DateTime'), 'class exists');
    $t.ok(!Php.classExists('FooBar'), 'class exists (not)');
    $t.ok(Php.classExists('/o/u_Test'), 'class exists (o namespace)');
}

function libTest($t) {
    $t.section('Module: Test');

    $t.ok($t.shake('Rasmus Lerdorf'), 'shake');
    $t.ok(!$t.shake('Leaning Tower of Pizza'), 'shake');
    $t.ok($t.shake({ a: 125 }), 'shake');
}

function libGlobal($t) {
    $t.section('Module: Global');

    setGlobals();

    $t.ok(Global.hello == 'world', 'global set');
}

function setGlobals() {
    Global.hello = 'world';
}


function libWeb($t) {

    $t.section('Module: Web');

    //print(Web.parseQuery('foo=1&bar=2&bar=3', ['bar']));

    // %5B0%5D   nane[0]=val
   // print(Web.stringifyQuery({ foo: 2, bar: 3, baz: [4, 5] }));

    $t.ok(Web.skipHitCounter(true) == true, 'skipHitCounter - true');
    $t.ok(Web.skipHitCounter(false) == false, 'skipHitCounter - false');

    $t.dies(function () {  Web.redirect('http://google.com'); }, 'redirect - normal');
    $t.dies(function () {  Web.redirect('mailto:google.com'); }, 'redirect - mailto');
    $t.dies(function () {  Web.redirect('//google.com'); }, 'redirect - no protocol');
    $t.dies(function () {  Web.redirect('bob@ftp://google.com'); }, 'redirect - ftp & username');


}

function libInput($t) {

    $t.section('Module: Input');

    $t.dies(F { formValidate('abc', 'badRule'); }, 'bad rule');

    $t.ok(formValidate('', 'id|optional') == '', 'optional ok');
    $t.ok(formValidate('123', 'id|optional') == '123', 'optional ok');

    $t.ok(formValidate('id123', 'id') == 'id123', 'id ok');
    $t.ok(formValidate('$foo', 'id') == '', 'id not ok');

    $t.ok(formValidate('1234', 'i') == 1234, 'int ok');
    $t.ok(formValidate('123.4', 'f') == 123.4, 'float ok');
    $t.ok(formValidate('-123', 'i|min:-200') == -123, 'negative float');
    $t.ok(formValidate('$1', 'i') == 0, 'number not ok');

    $t.ok(formValidate('true', 'b') == true, 'boolean ok');
    $t.ok(formValidate('false', 'b') == false, 'boolean ok');
    $t.ok(formValidate('1', 'b') == true, 'boolean ok');
    $t.ok(formValidate('0', 'b') == false, 'boolean ok');
    $t.ok(formValidate('$1', 'b') == false, 'boolean not ok = false');

    $t.ok(formValidate('me@mail.com', 'email') == 'me@mail.com', 'email ok');
    $t.ok(formValidate('me.com', 'email') == '', 'email not ok');
    $t.ok(formValidate('me@mailcom', 'email') == '', 'email not ok');
    $t.ok(formValidate('skip', 'email') == '', 'email not ok');

    $t.ok(formValidate('1', 'accepted') == true, 'accepted ok');
    $t.ok(formValidate('0', 'accepted') == false, 'accepted not ok');
    $t.ok(formValidate('', 'accepted') == false, 'accepted not ok');

    $t.ok(formValidate('(123) 456-7890 x23', 'phone') == '(123) 456-7890 x23', 'phone ok');
    $t.ok(formValidate('badPhone', 'phone') == '', 'phone not ok');

    $t.ok(formValidate('abc  123!', 's') == 'abc 123!', 'text ok');
    $t.ok(formValidate('abc<b>tag', 's') == 'abctag', 'text no tag');
    $t.ok(formValidate('abc\nline2', 's') == 'abc line2', 'text newline');

    $sb = 'abc  123\n\n\nxyz!\n';
    $t.ok(formValidate($sb, 'body|min:1') == 'abc 123\n\nxyz!', 'body spaces');
    $t.ok(formValidate('abc<b>tag', 'body|min:1') == 'abctag', 'body no tag');
    $t.ok(formValidate('abc\n\n\nline2', 'body|min:1') == 'abc\n\nline2', 'body newline');
    $t.ok(formValidate('short', 'body') == '', 'body min');

    $t.ok(formValidate('???', 'civilize|s') == '??', 'civilize');

    $t.ok(formValidate('toolong', 's|max:5') == '', 'max string');
    $t.ok(formValidate('100', 'i|max:10') == 0, 'max int');
    $t.ok(formValidate('5', 'i|min:10') == 0, 'min int');
    $t.ok(formValidate('5', 'i|min:10') == 0, 'min int');

    $t.ok(formValidate('user 123', 'username') == '', 'username - space');
    $t.ok(formValidate('user123', 'username') == 'user123', 'username ok');

    if (!isPerfMode()) {
        $t.ok(formValidate('asdfasdf', 'password') == '', 'password - weak');

        $correctHash = '$2y$10$YmeQNjEKwOu4kMS/bszSvu7Sn09z5R5OqJaULriM4JVIB.S5W7an.';
        $pw = formValidate('rewjg23jiwof', 'password');
        $t.ok($pw.match($correctHash), 'password - match()');
        $t.ok(!$pw.match('nope'), 'password - no match()');
    }

    // TODO: test get, post, and post w/out csrf

}

function formValidate($v, $type) {
    $val = Input.validate('test', $v, $type);
    return $val['value'];
}

function libSettings($t) {

    $t.section('Module: Settings');

    $t.ok(Settings.get('num') == -123.45, 'get num');
    $t.ok(Settings.get('booleanFalse') == false, 'get boolean');
    $t.ok(Settings.get('booleanTrue') == true, 'get boolean');
    $t.ok(Settings.get('string') == 'value with spaces, etc.', 'get string');
    $t.ok(Settings.get('map').key == 'value', 'get map');
    $t.ok(Settings.get('list')[1] == 'value 1', 'get list');

    $t.dies(F { Settings.get('MISSING'); }, 'missing key');
}

function libMapDb($t) {

    $t.section('Module: MapDb');

    $t.ok(MapDb.deleteBucket('test'), 'delete bucket');

    $t.ok(MapDb.insertMap('test', 'hello', { hello: 'World!' }), 'insert');
    $t.ok(MapDb.insertMap('test', 'hello', { hello: 'There!' }), 'insert');


    $t.ok(MapDb.selectMap('test', 1).hello == 'World!', 'selectMap');
    $t.ok(MapDb.selectMaps('test', 'hello').length() == 2, 'selectMaps');
    $t.ok(MapDb.buckets()[0].numMaps == 2, 'buckets()');


}

function libSession($t) {

    $t.section('Module: Session');

    Session.deleteAll();

    Session.set('key1', 'value');
    Session.set('key2', { a: 'b' });
    $t.ok(Session.get('key1') == 'value', 'set/get');
    $t.ok(Session.get('key2').a == 'b', 'get map');

    $t.ok(Session.getAll().keys().join('|') == 'key1|key2', 'getAll');

    $t.ok(Session.get('missing', '') == '', 'get with blank default');
    $t.ok(Session.get('missing', 'default') == 'default', 'get with default');

    $t.ok(Session.hasKey('key1'), 'hasKey true');
    $t.ok(Session.delete('key1') == 'value', 'delete');
    $t.ok(!Session.hasKey('key1'), 'hasKey false');

    Session.deleteAll();
    $t.ok(Session.getAll().keys().length() == 0, 'deleteAll');

    $t.ok(Session.addCounter('num') == 1, 'counter 1');
    $t.ok(Session.addCounter('num') == 2, 'counter 2');

    Session.setFlash('fkey', 'fvalue');
    $t.ok(Session.getFlash('fkey') == 'fvalue', 'flash set/get');

    $t.ok(Session.hasFlash('fkey'), 'hasFlash - true');
    $t.ok(Session.hasFlash('missing'), 'hasFlash - false');

    Session.addToList('list', 123);
    $t.ok(Session.get('list')[0] == 123, 'addToList 1');

    Session.addToList('list', 456);
    $t.ok(Session.get('list')[1] == 456, 'addToList 2');

    $t.dies(function () { Session.get('missing'); }, 'get bad key');

}

function libCache($t) {

    $t.section('Module: Cache');

    Cache.set('test', 123, 1);
    $t.ok(Cache.has('test'), 'has');

    $t.ok(!Cache.has('not'), 'has not');
    $t.ok(Cache.get('test') == 123, 'get');

    $t.ok(Cache.get('not', 'missing') == 'missing', 'get default');

    Cache.set('data', { a: ['x', 'y', 'z'] }, 3);
    $t.ok(Cache.get('data').a.join('|') == 'x|y|z', 'get map + list');

    Cache.delete('data');
    $t.ok(!Cache.has('data'), 'delete');

    $t.ok(Cache.counter('count') == 1, 'counter 1');
    $t.ok(Cache.counter('count') == 2, 'counter 2');
    $t.ok(Cache.counter('count', 2) == 4, 'counter +2');
    $t.ok(Cache.counter('count', -1) == 3, 'counter -1');

    Cache.delete('count');

    Cache.set('short', 'a', 0.1);
    Cache.set('longer', 'a', 1);
    Cache.set('forever', 'a', 0);
    System.sleep(200);
    $t.ok(!Cache.has('short'), '100ms expiry');
    $t.ok(Cache.has('longer'), '1s expiry');
    $t.ok(Cache.has('forever'), 'no expiry');

    Cache.delete('short');
    Cache.delete('longer');
    Cache.delete('forever');
}

function libNet($t) {

    $t.section('Module: Net');

    $content = Net.httpGet(url'https://tht-lang.org');
    $t.ok($content.match(r'programming language'.flags('i')), 'Net get');

    // TODO
}

function libSystem($t) {

    $t.section('Module: System');

    $t.ok(System.envVar('USER') != false, 'envVar');
    $t.ok(System.envVar('DFSDFHJSF') == '', 'envVar - missing');
    $t.ok(System.envVar('DFSDFHJSF', 'def') == 'def', 'envVar - default');
    $t.ok(System.startTime() > 10000000, 'startTime');
    $t.ok(System.memoryUsage() > 0, 'memoryUsage');
    $t.ok(System.peakMemoryUsage() > 0, 'peakMemoryUsage');
    $t.ok(System.os().match(r'(mac|windows|linux)'), 'os');

    // Can't be called in webMode
    //$t.ok(System.command(cmd'ls').output[0] == 'thtApp.php', 'command');
}

// TODO: This is all hardcoded to my local setup
function libRequest($t) {

    $t.section('Module: Request');

    $t.ok(Request.ip(), 'ip');
    $t.ok(Request.ip(true).type() == 'list', 'ip list');

    $ua = Request.userAgent();
    $t.ok($ua.os == 'mac' || $ua.os == 'windows', 'userAgent - os');
    $t.ok($ua.browser == 'chrome' || $ua.browser == 'firefox', 'userAgent - browser');
    $t.ok($ua.full.contains('Mozilla'), 'userAgent - full');
    $t.ok(Request.languages()[0] == 'en-us', 'languages');

    $t.ok(Request.isHttps() == false, 'isHttps');
    $t.ok(Request.isAjax() == false, 'isAjax');
    $t.ok(Request.referrer() == '', 'referrer');

    $t.ok(Request.method() == 'get', 'method');
    $t.ok(Request.headers().hasKey('accept-encoding'), 'headers');
}



//========

T templateHtml($users) {

    <b>> Hello
    -- foreach $users as $u {
        <li>> {{ $u }}
    -- }

}

T dataJs($d) {
    $d =  {{ $d }};
}

T entHtml() {
    <p>> 2 &gt; 1
}

T formatBlockHtml() {
    <p>>>
        <foo>
    </>
}

T bsHtml() {
    a\nb\nc
}

T jsHtml() {
    <script nonce="{{ Web.nonce() }}">
    var a = '&lt;a\nb\nc';
    </>
}

T expHtml($inner, $outer) {
    <p "{{ $inner }}">> {{ $outer }}
}

T tagsHtml($exp) {
    {{ $exp }}
}

T inCss() {
    font-weight: bold;
}

T inJs() {
    var a = 1;
}

T tagHtml($val) {
    <p>> {{ $val }}
}

T expCss($inp) {
    font-weight: {{ $inp }};
}

//======


F dynamicFunction($a) {
    return $a ~ '!!!';
}

F noReturn() {

}

F testDefaultMap($xmap = { a: 123 }) {
    return $xmap;
}

F testDefaultList($xlist = ['a', 'b', 'c']) {

    return $xlist;
}

F testDefaultMaps($m1 = { a: 'aa' }, $m2 = { b: 'bb' }) {
    $m1['m2'] = $m2;
    return $m1;
}

F spread(...$args) {
    return $args.join(':');
}

